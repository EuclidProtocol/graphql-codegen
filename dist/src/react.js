"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CodegenGeneratedPoolMyPoolsDocument = exports.CodegenGeneratedPoolMyPoolsUserDocument = exports.CodegenGeneratedPoolMyPoolsPairDocument = exports.CodegenGeneratedPoolFeesCollectedDocument = exports.CodegenGeneratedPoolFeesCollectedBreakdownDocument = exports.CodegenGeneratedFactoryDocument = exports.CodegenGeneratedFactoryVlpDocument = exports.CodegenGeneratedFactoryStateDocument = exports.CodegenGeneratedFactoryPartnerFeesCollectedDocument = exports.CodegenGeneratedFactoryPartnerFeesCollectedTotalDocument = exports.CodegenGeneratedFactoryPartnerFeesCollectedTotalTotalsDocument = exports.CodegenGeneratedFactoryGetLptokenAddressDocument = exports.CodegenGeneratedFactoryEscrowDocument = exports.CodegenGeneratedFactoryAllowedDenomsDocument = exports.CodegenGeneratedFactoryAllTokensDocument = exports.CodegenGeneratedFactoryAllTokensPaginationDocument = exports.CodegenGeneratedFactoryAllPoolsDocument = exports.CodegenGeneratedFactoryAllPoolsPoolsDocument = exports.CodegenGeneratedFactoryAllPoolsPoolsPairDocument = exports.CodegenGeneratedFactoryAllPoolsPaginationDocument = exports.CodegenGeneratedCwMulticallSmartQueriesDocument = exports.CodegenGeneratedCwMulticallSmartQueriesResultsDocument = exports.CodegenGeneratedCwMulticallRawQueriesDocument = exports.CodegenGeneratedCwMulticallRawQueriesResultsDocument = exports.CodegenGeneratedCwDocument = exports.CodegenGeneratedCwTokenInfoDocument = exports.CodegenGeneratedCwBalanceDocument = exports.CodegenGeneratedChainsDocument = exports.CodegenGeneratedChainsRouterConfigDocument = exports.CodegenGeneratedChainsKeplrConfigDocument = exports.CodegenGeneratedChainsKeplrConfigStakecurrencyDocument = exports.CodegenGeneratedChainsKeplrConfigGaspricestepDocument = exports.CodegenGeneratedChainsKeplrConfigFeecurrenciesDocument = exports.CodegenGeneratedChainsKeplrConfigFeecurrenciesGaspricestepDocument = exports.CodegenGeneratedChainsKeplrConfigCurrenciesDocument = exports.CodegenGeneratedChainsKeplrConfigBip44Document = exports.CodegenGeneratedChainsKeplrConfigBech32ConfigDocument = exports.CodegenGeneratedChainsEvmChainConfigDocument = exports.CodegenGeneratedChainsEvmChainConfigRpcUrlsDocument = exports.CodegenGeneratedChainsEvmChainConfigRpcUrlsDefaultDocument = exports.CodegenGeneratedChainsEvmChainConfigNativeCurrencyDocument = exports.CodegenGeneratedChainsContractsDocument = exports.CodegenGeneratedChainsChainConfigDocument = exports.CodegenGeneratedChainsAllEvmChainsDocument = exports.CodegenGeneratedChainsAllEvmChainsRpcUrlsDocument = exports.CodegenGeneratedChainsAllEvmChainsRpcUrlsDefaultDocument = exports.CodegenGeneratedChainsAllEvmChainsNativeCurrencyDocument = exports.CodegenGeneratedChainsAllChainsDocument = exports.ITokenPairSortBy = exports.ISortOrder = void 0;
exports.CodegenGeneratedVlpFeeRecipientDocument = exports.CodegenGeneratedVlpAllPoolsDocument = exports.CodegenGeneratedVlpAllPoolsPoolsDocument = exports.CodegenGeneratedVlpAllPoolsPoolsPoolDocument = exports.CodegenGeneratedVlpAllPoolsPaginationDocument = exports.CodegenGeneratedVcoinDocument = exports.CodegenGeneratedVcoinUserBalanceDocument = exports.CodegenGeneratedVcoinUserBalanceBalancesDocument = exports.CodegenGeneratedVcoinStateDocument = exports.CodegenGeneratedVcoinBalanceDocument = exports.CodegenGeneratedTokenDocument = exports.CodegenGeneratedTokenTokensMetadataDocument = exports.CodegenGeneratedTokenTokenMetadatasDocument = exports.CodegenGeneratedTokenTokenMetadataByIdDocument = exports.CodegenGeneratedTokenTokenLiquidityDocument = exports.CodegenGeneratedTokenTokenLiquiditiesDocument = exports.CodegenGeneratedTokenTokenDenomsDocument = exports.CodegenGeneratedTokenTokenDenomsDenomsDocument = exports.CodegenGeneratedTokenGetAllFaucetsDocument = exports.CodegenGeneratedTokenDexMetadataDocument = exports.CodegenGeneratedTokenChainsForTokenLaunchDocument = exports.CodegenGeneratedTokenAllDexesDocument = exports.CodegenGeneratedRouterDocument = exports.CodegenGeneratedRouterVlpDocument = exports.CodegenGeneratedRouterTokenPairsFromVlpDocument = exports.CodegenGeneratedRouterTokenDenomsDocument = exports.CodegenGeneratedRouterTokenDenomsDenomsDocument = exports.CodegenGeneratedRouterStateDocument = exports.CodegenGeneratedRouterSimulateSwapDocument = exports.CodegenGeneratedRouterSimulateReleaseEscrowDocument = exports.CodegenGeneratedRouterSimulateReleaseEscrowReleaseAmountsDocument = exports.CodegenGeneratedRouterSimulateReleaseEscrowReleaseAmountsCrossChainUserDocument = exports.CodegenGeneratedRouterSimulateReleaseEscrowReleaseAmountsCrossChainUserUserDocument = exports.CodegenGeneratedRouterEscrowsDocument = exports.CodegenGeneratedRouterChainDocument = exports.CodegenGeneratedRouterChainChainDocument = exports.CodegenGeneratedRouterChainChainChainTypeDocument = exports.CodegenGeneratedRouterChainChainChainTypeIbcDocument = exports.CodegenGeneratedRouterAllVlpsDocument = exports.CodegenGeneratedRouterAllVlpsVlpsDocument = exports.CodegenGeneratedRouterAllTokensDocument = exports.CodegenGeneratedRouterAllEscrowsDocument = exports.CodegenGeneratedRouterAllChainsDocument = exports.CodegenGeneratedPoolDocument = exports.CodegenGeneratedPoolVolumeDocument = exports.CodegenGeneratedPoolVolumeVolumeBreakdown_24HoursDocument = exports.CodegenGeneratedPoolTokenPairWithLiquidityDocument = exports.CodegenGeneratedPoolTokenPairWithLiquidityResultsDocument = exports.CodegenGeneratedPoolTokenPairWithLiquidityResultsPairDocument = exports.CodegenGeneratedPoolTokenPairWithLiquidityPaginationDocument = void 0;
exports.CodegenGeneratedVlpDocument = exports.CodegenGeneratedVlpTotalFeesCollectedPerDenomDocument = exports.CodegenGeneratedVlpTotalFeesCollectedDocument = exports.CodegenGeneratedVlpTotalFeesCollectedLpFeesDocument = exports.CodegenGeneratedVlpTotalFeesCollectedLpFeesTotalsDocument = exports.CodegenGeneratedVlpTotalFeesCollectedEuclidFeesDocument = exports.CodegenGeneratedVlpTotalFeesCollectedEuclidFeesTotalsDocument = exports.CodegenGeneratedVlpStateDocument = exports.CodegenGeneratedVlpStatePoolConfigDocument = exports.CodegenGeneratedVlpStatePoolConfigStableDocument = exports.CodegenGeneratedVlpStatePairDocument = exports.CodegenGeneratedVlpStateFeeDocument = exports.CodegenGeneratedVlpStateFeeRecipientDocument = exports.CodegenGeneratedVlpPoolDocument = exports.CodegenGeneratedVlpLiquidityDocument = exports.CodegenGeneratedVlpLiquidityPairDocument = exports.CodegenGeneratedVlpFeeDocument = void 0;
exports.useCodegenGeneratedChainsAllChainsQuery = useCodegenGeneratedChainsAllChainsQuery;
exports.useCodegenGeneratedChainsAllChainsLazyQuery = useCodegenGeneratedChainsAllChainsLazyQuery;
exports.refetchCodegenGeneratedChainsAllChainsQuery = refetchCodegenGeneratedChainsAllChainsQuery;
exports.useCodegenGeneratedChainsAllEvmChainsNativeCurrencyQuery = useCodegenGeneratedChainsAllEvmChainsNativeCurrencyQuery;
exports.useCodegenGeneratedChainsAllEvmChainsNativeCurrencyLazyQuery = useCodegenGeneratedChainsAllEvmChainsNativeCurrencyLazyQuery;
exports.refetchCodegenGeneratedChainsAllEvmChainsNativeCurrencyQuery = refetchCodegenGeneratedChainsAllEvmChainsNativeCurrencyQuery;
exports.useCodegenGeneratedChainsAllEvmChainsRpcUrlsDefaultQuery = useCodegenGeneratedChainsAllEvmChainsRpcUrlsDefaultQuery;
exports.useCodegenGeneratedChainsAllEvmChainsRpcUrlsDefaultLazyQuery = useCodegenGeneratedChainsAllEvmChainsRpcUrlsDefaultLazyQuery;
exports.refetchCodegenGeneratedChainsAllEvmChainsRpcUrlsDefaultQuery = refetchCodegenGeneratedChainsAllEvmChainsRpcUrlsDefaultQuery;
exports.useCodegenGeneratedChainsAllEvmChainsRpcUrlsQuery = useCodegenGeneratedChainsAllEvmChainsRpcUrlsQuery;
exports.useCodegenGeneratedChainsAllEvmChainsRpcUrlsLazyQuery = useCodegenGeneratedChainsAllEvmChainsRpcUrlsLazyQuery;
exports.refetchCodegenGeneratedChainsAllEvmChainsRpcUrlsQuery = refetchCodegenGeneratedChainsAllEvmChainsRpcUrlsQuery;
exports.useCodegenGeneratedChainsAllEvmChainsQuery = useCodegenGeneratedChainsAllEvmChainsQuery;
exports.useCodegenGeneratedChainsAllEvmChainsLazyQuery = useCodegenGeneratedChainsAllEvmChainsLazyQuery;
exports.refetchCodegenGeneratedChainsAllEvmChainsQuery = refetchCodegenGeneratedChainsAllEvmChainsQuery;
exports.useCodegenGeneratedChainsChainConfigQuery = useCodegenGeneratedChainsChainConfigQuery;
exports.useCodegenGeneratedChainsChainConfigLazyQuery = useCodegenGeneratedChainsChainConfigLazyQuery;
exports.refetchCodegenGeneratedChainsChainConfigQuery = refetchCodegenGeneratedChainsChainConfigQuery;
exports.useCodegenGeneratedChainsContractsQuery = useCodegenGeneratedChainsContractsQuery;
exports.useCodegenGeneratedChainsContractsLazyQuery = useCodegenGeneratedChainsContractsLazyQuery;
exports.refetchCodegenGeneratedChainsContractsQuery = refetchCodegenGeneratedChainsContractsQuery;
exports.useCodegenGeneratedChainsEvmChainConfigNativeCurrencyQuery = useCodegenGeneratedChainsEvmChainConfigNativeCurrencyQuery;
exports.useCodegenGeneratedChainsEvmChainConfigNativeCurrencyLazyQuery = useCodegenGeneratedChainsEvmChainConfigNativeCurrencyLazyQuery;
exports.refetchCodegenGeneratedChainsEvmChainConfigNativeCurrencyQuery = refetchCodegenGeneratedChainsEvmChainConfigNativeCurrencyQuery;
exports.useCodegenGeneratedChainsEvmChainConfigRpcUrlsDefaultQuery = useCodegenGeneratedChainsEvmChainConfigRpcUrlsDefaultQuery;
exports.useCodegenGeneratedChainsEvmChainConfigRpcUrlsDefaultLazyQuery = useCodegenGeneratedChainsEvmChainConfigRpcUrlsDefaultLazyQuery;
exports.refetchCodegenGeneratedChainsEvmChainConfigRpcUrlsDefaultQuery = refetchCodegenGeneratedChainsEvmChainConfigRpcUrlsDefaultQuery;
exports.useCodegenGeneratedChainsEvmChainConfigRpcUrlsQuery = useCodegenGeneratedChainsEvmChainConfigRpcUrlsQuery;
exports.useCodegenGeneratedChainsEvmChainConfigRpcUrlsLazyQuery = useCodegenGeneratedChainsEvmChainConfigRpcUrlsLazyQuery;
exports.refetchCodegenGeneratedChainsEvmChainConfigRpcUrlsQuery = refetchCodegenGeneratedChainsEvmChainConfigRpcUrlsQuery;
exports.useCodegenGeneratedChainsEvmChainConfigQuery = useCodegenGeneratedChainsEvmChainConfigQuery;
exports.useCodegenGeneratedChainsEvmChainConfigLazyQuery = useCodegenGeneratedChainsEvmChainConfigLazyQuery;
exports.refetchCodegenGeneratedChainsEvmChainConfigQuery = refetchCodegenGeneratedChainsEvmChainConfigQuery;
exports.useCodegenGeneratedChainsKeplrConfigBech32ConfigQuery = useCodegenGeneratedChainsKeplrConfigBech32ConfigQuery;
exports.useCodegenGeneratedChainsKeplrConfigBech32ConfigLazyQuery = useCodegenGeneratedChainsKeplrConfigBech32ConfigLazyQuery;
exports.refetchCodegenGeneratedChainsKeplrConfigBech32ConfigQuery = refetchCodegenGeneratedChainsKeplrConfigBech32ConfigQuery;
exports.useCodegenGeneratedChainsKeplrConfigBip44Query = useCodegenGeneratedChainsKeplrConfigBip44Query;
exports.useCodegenGeneratedChainsKeplrConfigBip44LazyQuery = useCodegenGeneratedChainsKeplrConfigBip44LazyQuery;
exports.refetchCodegenGeneratedChainsKeplrConfigBip44Query = refetchCodegenGeneratedChainsKeplrConfigBip44Query;
exports.useCodegenGeneratedChainsKeplrConfigCurrenciesQuery = useCodegenGeneratedChainsKeplrConfigCurrenciesQuery;
exports.useCodegenGeneratedChainsKeplrConfigCurrenciesLazyQuery = useCodegenGeneratedChainsKeplrConfigCurrenciesLazyQuery;
exports.refetchCodegenGeneratedChainsKeplrConfigCurrenciesQuery = refetchCodegenGeneratedChainsKeplrConfigCurrenciesQuery;
exports.useCodegenGeneratedChainsKeplrConfigFeecurrenciesGaspricestepQuery = useCodegenGeneratedChainsKeplrConfigFeecurrenciesGaspricestepQuery;
exports.useCodegenGeneratedChainsKeplrConfigFeecurrenciesGaspricestepLazyQuery = useCodegenGeneratedChainsKeplrConfigFeecurrenciesGaspricestepLazyQuery;
exports.refetchCodegenGeneratedChainsKeplrConfigFeecurrenciesGaspricestepQuery = refetchCodegenGeneratedChainsKeplrConfigFeecurrenciesGaspricestepQuery;
exports.useCodegenGeneratedChainsKeplrConfigFeecurrenciesQuery = useCodegenGeneratedChainsKeplrConfigFeecurrenciesQuery;
exports.useCodegenGeneratedChainsKeplrConfigFeecurrenciesLazyQuery = useCodegenGeneratedChainsKeplrConfigFeecurrenciesLazyQuery;
exports.refetchCodegenGeneratedChainsKeplrConfigFeecurrenciesQuery = refetchCodegenGeneratedChainsKeplrConfigFeecurrenciesQuery;
exports.useCodegenGeneratedChainsKeplrConfigGaspricestepQuery = useCodegenGeneratedChainsKeplrConfigGaspricestepQuery;
exports.useCodegenGeneratedChainsKeplrConfigGaspricestepLazyQuery = useCodegenGeneratedChainsKeplrConfigGaspricestepLazyQuery;
exports.refetchCodegenGeneratedChainsKeplrConfigGaspricestepQuery = refetchCodegenGeneratedChainsKeplrConfigGaspricestepQuery;
exports.useCodegenGeneratedChainsKeplrConfigStakecurrencyQuery = useCodegenGeneratedChainsKeplrConfigStakecurrencyQuery;
exports.useCodegenGeneratedChainsKeplrConfigStakecurrencyLazyQuery = useCodegenGeneratedChainsKeplrConfigStakecurrencyLazyQuery;
exports.refetchCodegenGeneratedChainsKeplrConfigStakecurrencyQuery = refetchCodegenGeneratedChainsKeplrConfigStakecurrencyQuery;
exports.useCodegenGeneratedChainsKeplrConfigQuery = useCodegenGeneratedChainsKeplrConfigQuery;
exports.useCodegenGeneratedChainsKeplrConfigLazyQuery = useCodegenGeneratedChainsKeplrConfigLazyQuery;
exports.refetchCodegenGeneratedChainsKeplrConfigQuery = refetchCodegenGeneratedChainsKeplrConfigQuery;
exports.useCodegenGeneratedChainsRouterConfigQuery = useCodegenGeneratedChainsRouterConfigQuery;
exports.useCodegenGeneratedChainsRouterConfigLazyQuery = useCodegenGeneratedChainsRouterConfigLazyQuery;
exports.refetchCodegenGeneratedChainsRouterConfigQuery = refetchCodegenGeneratedChainsRouterConfigQuery;
exports.useCodegenGeneratedChainsQuery = useCodegenGeneratedChainsQuery;
exports.useCodegenGeneratedChainsLazyQuery = useCodegenGeneratedChainsLazyQuery;
exports.refetchCodegenGeneratedChainsQuery = refetchCodegenGeneratedChainsQuery;
exports.useCodegenGeneratedCwBalanceQuery = useCodegenGeneratedCwBalanceQuery;
exports.useCodegenGeneratedCwBalanceLazyQuery = useCodegenGeneratedCwBalanceLazyQuery;
exports.refetchCodegenGeneratedCwBalanceQuery = refetchCodegenGeneratedCwBalanceQuery;
exports.useCodegenGeneratedCwTokenInfoQuery = useCodegenGeneratedCwTokenInfoQuery;
exports.useCodegenGeneratedCwTokenInfoLazyQuery = useCodegenGeneratedCwTokenInfoLazyQuery;
exports.refetchCodegenGeneratedCwTokenInfoQuery = refetchCodegenGeneratedCwTokenInfoQuery;
exports.useCodegenGeneratedCwQuery = useCodegenGeneratedCwQuery;
exports.useCodegenGeneratedCwLazyQuery = useCodegenGeneratedCwLazyQuery;
exports.refetchCodegenGeneratedCwQuery = refetchCodegenGeneratedCwQuery;
exports.useCodegenGeneratedCwMulticallRawQueriesResultsQuery = useCodegenGeneratedCwMulticallRawQueriesResultsQuery;
exports.useCodegenGeneratedCwMulticallRawQueriesResultsLazyQuery = useCodegenGeneratedCwMulticallRawQueriesResultsLazyQuery;
exports.refetchCodegenGeneratedCwMulticallRawQueriesResultsQuery = refetchCodegenGeneratedCwMulticallRawQueriesResultsQuery;
exports.useCodegenGeneratedCwMulticallRawQueriesQuery = useCodegenGeneratedCwMulticallRawQueriesQuery;
exports.useCodegenGeneratedCwMulticallRawQueriesLazyQuery = useCodegenGeneratedCwMulticallRawQueriesLazyQuery;
exports.refetchCodegenGeneratedCwMulticallRawQueriesQuery = refetchCodegenGeneratedCwMulticallRawQueriesQuery;
exports.useCodegenGeneratedCwMulticallSmartQueriesResultsQuery = useCodegenGeneratedCwMulticallSmartQueriesResultsQuery;
exports.useCodegenGeneratedCwMulticallSmartQueriesResultsLazyQuery = useCodegenGeneratedCwMulticallSmartQueriesResultsLazyQuery;
exports.refetchCodegenGeneratedCwMulticallSmartQueriesResultsQuery = refetchCodegenGeneratedCwMulticallSmartQueriesResultsQuery;
exports.useCodegenGeneratedCwMulticallSmartQueriesQuery = useCodegenGeneratedCwMulticallSmartQueriesQuery;
exports.useCodegenGeneratedCwMulticallSmartQueriesLazyQuery = useCodegenGeneratedCwMulticallSmartQueriesLazyQuery;
exports.refetchCodegenGeneratedCwMulticallSmartQueriesQuery = refetchCodegenGeneratedCwMulticallSmartQueriesQuery;
exports.useCodegenGeneratedFactoryAllPoolsPaginationQuery = useCodegenGeneratedFactoryAllPoolsPaginationQuery;
exports.useCodegenGeneratedFactoryAllPoolsPaginationLazyQuery = useCodegenGeneratedFactoryAllPoolsPaginationLazyQuery;
exports.refetchCodegenGeneratedFactoryAllPoolsPaginationQuery = refetchCodegenGeneratedFactoryAllPoolsPaginationQuery;
exports.useCodegenGeneratedFactoryAllPoolsPoolsPairQuery = useCodegenGeneratedFactoryAllPoolsPoolsPairQuery;
exports.useCodegenGeneratedFactoryAllPoolsPoolsPairLazyQuery = useCodegenGeneratedFactoryAllPoolsPoolsPairLazyQuery;
exports.refetchCodegenGeneratedFactoryAllPoolsPoolsPairQuery = refetchCodegenGeneratedFactoryAllPoolsPoolsPairQuery;
exports.useCodegenGeneratedFactoryAllPoolsPoolsQuery = useCodegenGeneratedFactoryAllPoolsPoolsQuery;
exports.useCodegenGeneratedFactoryAllPoolsPoolsLazyQuery = useCodegenGeneratedFactoryAllPoolsPoolsLazyQuery;
exports.refetchCodegenGeneratedFactoryAllPoolsPoolsQuery = refetchCodegenGeneratedFactoryAllPoolsPoolsQuery;
exports.useCodegenGeneratedFactoryAllPoolsQuery = useCodegenGeneratedFactoryAllPoolsQuery;
exports.useCodegenGeneratedFactoryAllPoolsLazyQuery = useCodegenGeneratedFactoryAllPoolsLazyQuery;
exports.refetchCodegenGeneratedFactoryAllPoolsQuery = refetchCodegenGeneratedFactoryAllPoolsQuery;
exports.useCodegenGeneratedFactoryAllTokensPaginationQuery = useCodegenGeneratedFactoryAllTokensPaginationQuery;
exports.useCodegenGeneratedFactoryAllTokensPaginationLazyQuery = useCodegenGeneratedFactoryAllTokensPaginationLazyQuery;
exports.refetchCodegenGeneratedFactoryAllTokensPaginationQuery = refetchCodegenGeneratedFactoryAllTokensPaginationQuery;
exports.useCodegenGeneratedFactoryAllTokensQuery = useCodegenGeneratedFactoryAllTokensQuery;
exports.useCodegenGeneratedFactoryAllTokensLazyQuery = useCodegenGeneratedFactoryAllTokensLazyQuery;
exports.refetchCodegenGeneratedFactoryAllTokensQuery = refetchCodegenGeneratedFactoryAllTokensQuery;
exports.useCodegenGeneratedFactoryAllowedDenomsQuery = useCodegenGeneratedFactoryAllowedDenomsQuery;
exports.useCodegenGeneratedFactoryAllowedDenomsLazyQuery = useCodegenGeneratedFactoryAllowedDenomsLazyQuery;
exports.refetchCodegenGeneratedFactoryAllowedDenomsQuery = refetchCodegenGeneratedFactoryAllowedDenomsQuery;
exports.useCodegenGeneratedFactoryEscrowQuery = useCodegenGeneratedFactoryEscrowQuery;
exports.useCodegenGeneratedFactoryEscrowLazyQuery = useCodegenGeneratedFactoryEscrowLazyQuery;
exports.refetchCodegenGeneratedFactoryEscrowQuery = refetchCodegenGeneratedFactoryEscrowQuery;
exports.useCodegenGeneratedFactoryGetLptokenAddressQuery = useCodegenGeneratedFactoryGetLptokenAddressQuery;
exports.useCodegenGeneratedFactoryGetLptokenAddressLazyQuery = useCodegenGeneratedFactoryGetLptokenAddressLazyQuery;
exports.refetchCodegenGeneratedFactoryGetLptokenAddressQuery = refetchCodegenGeneratedFactoryGetLptokenAddressQuery;
exports.useCodegenGeneratedFactoryPartnerFeesCollectedTotalTotalsQuery = useCodegenGeneratedFactoryPartnerFeesCollectedTotalTotalsQuery;
exports.useCodegenGeneratedFactoryPartnerFeesCollectedTotalTotalsLazyQuery = useCodegenGeneratedFactoryPartnerFeesCollectedTotalTotalsLazyQuery;
exports.refetchCodegenGeneratedFactoryPartnerFeesCollectedTotalTotalsQuery = refetchCodegenGeneratedFactoryPartnerFeesCollectedTotalTotalsQuery;
exports.useCodegenGeneratedFactoryPartnerFeesCollectedTotalQuery = useCodegenGeneratedFactoryPartnerFeesCollectedTotalQuery;
exports.useCodegenGeneratedFactoryPartnerFeesCollectedTotalLazyQuery = useCodegenGeneratedFactoryPartnerFeesCollectedTotalLazyQuery;
exports.refetchCodegenGeneratedFactoryPartnerFeesCollectedTotalQuery = refetchCodegenGeneratedFactoryPartnerFeesCollectedTotalQuery;
exports.useCodegenGeneratedFactoryPartnerFeesCollectedQuery = useCodegenGeneratedFactoryPartnerFeesCollectedQuery;
exports.useCodegenGeneratedFactoryPartnerFeesCollectedLazyQuery = useCodegenGeneratedFactoryPartnerFeesCollectedLazyQuery;
exports.refetchCodegenGeneratedFactoryPartnerFeesCollectedQuery = refetchCodegenGeneratedFactoryPartnerFeesCollectedQuery;
exports.useCodegenGeneratedFactoryStateQuery = useCodegenGeneratedFactoryStateQuery;
exports.useCodegenGeneratedFactoryStateLazyQuery = useCodegenGeneratedFactoryStateLazyQuery;
exports.refetchCodegenGeneratedFactoryStateQuery = refetchCodegenGeneratedFactoryStateQuery;
exports.useCodegenGeneratedFactoryVlpQuery = useCodegenGeneratedFactoryVlpQuery;
exports.useCodegenGeneratedFactoryVlpLazyQuery = useCodegenGeneratedFactoryVlpLazyQuery;
exports.refetchCodegenGeneratedFactoryVlpQuery = refetchCodegenGeneratedFactoryVlpQuery;
exports.useCodegenGeneratedFactoryQuery = useCodegenGeneratedFactoryQuery;
exports.useCodegenGeneratedFactoryLazyQuery = useCodegenGeneratedFactoryLazyQuery;
exports.refetchCodegenGeneratedFactoryQuery = refetchCodegenGeneratedFactoryQuery;
exports.useCodegenGeneratedPoolFeesCollectedBreakdownQuery = useCodegenGeneratedPoolFeesCollectedBreakdownQuery;
exports.useCodegenGeneratedPoolFeesCollectedBreakdownLazyQuery = useCodegenGeneratedPoolFeesCollectedBreakdownLazyQuery;
exports.refetchCodegenGeneratedPoolFeesCollectedBreakdownQuery = refetchCodegenGeneratedPoolFeesCollectedBreakdownQuery;
exports.useCodegenGeneratedPoolFeesCollectedQuery = useCodegenGeneratedPoolFeesCollectedQuery;
exports.useCodegenGeneratedPoolFeesCollectedLazyQuery = useCodegenGeneratedPoolFeesCollectedLazyQuery;
exports.refetchCodegenGeneratedPoolFeesCollectedQuery = refetchCodegenGeneratedPoolFeesCollectedQuery;
exports.useCodegenGeneratedPoolMyPoolsPairQuery = useCodegenGeneratedPoolMyPoolsPairQuery;
exports.useCodegenGeneratedPoolMyPoolsPairLazyQuery = useCodegenGeneratedPoolMyPoolsPairLazyQuery;
exports.refetchCodegenGeneratedPoolMyPoolsPairQuery = refetchCodegenGeneratedPoolMyPoolsPairQuery;
exports.useCodegenGeneratedPoolMyPoolsUserQuery = useCodegenGeneratedPoolMyPoolsUserQuery;
exports.useCodegenGeneratedPoolMyPoolsUserLazyQuery = useCodegenGeneratedPoolMyPoolsUserLazyQuery;
exports.refetchCodegenGeneratedPoolMyPoolsUserQuery = refetchCodegenGeneratedPoolMyPoolsUserQuery;
exports.useCodegenGeneratedPoolMyPoolsQuery = useCodegenGeneratedPoolMyPoolsQuery;
exports.useCodegenGeneratedPoolMyPoolsLazyQuery = useCodegenGeneratedPoolMyPoolsLazyQuery;
exports.refetchCodegenGeneratedPoolMyPoolsQuery = refetchCodegenGeneratedPoolMyPoolsQuery;
exports.useCodegenGeneratedPoolTokenPairWithLiquidityPaginationQuery = useCodegenGeneratedPoolTokenPairWithLiquidityPaginationQuery;
exports.useCodegenGeneratedPoolTokenPairWithLiquidityPaginationLazyQuery = useCodegenGeneratedPoolTokenPairWithLiquidityPaginationLazyQuery;
exports.refetchCodegenGeneratedPoolTokenPairWithLiquidityPaginationQuery = refetchCodegenGeneratedPoolTokenPairWithLiquidityPaginationQuery;
exports.useCodegenGeneratedPoolTokenPairWithLiquidityResultsPairQuery = useCodegenGeneratedPoolTokenPairWithLiquidityResultsPairQuery;
exports.useCodegenGeneratedPoolTokenPairWithLiquidityResultsPairLazyQuery = useCodegenGeneratedPoolTokenPairWithLiquidityResultsPairLazyQuery;
exports.refetchCodegenGeneratedPoolTokenPairWithLiquidityResultsPairQuery = refetchCodegenGeneratedPoolTokenPairWithLiquidityResultsPairQuery;
exports.useCodegenGeneratedPoolTokenPairWithLiquidityResultsQuery = useCodegenGeneratedPoolTokenPairWithLiquidityResultsQuery;
exports.useCodegenGeneratedPoolTokenPairWithLiquidityResultsLazyQuery = useCodegenGeneratedPoolTokenPairWithLiquidityResultsLazyQuery;
exports.refetchCodegenGeneratedPoolTokenPairWithLiquidityResultsQuery = refetchCodegenGeneratedPoolTokenPairWithLiquidityResultsQuery;
exports.useCodegenGeneratedPoolTokenPairWithLiquidityQuery = useCodegenGeneratedPoolTokenPairWithLiquidityQuery;
exports.useCodegenGeneratedPoolTokenPairWithLiquidityLazyQuery = useCodegenGeneratedPoolTokenPairWithLiquidityLazyQuery;
exports.refetchCodegenGeneratedPoolTokenPairWithLiquidityQuery = refetchCodegenGeneratedPoolTokenPairWithLiquidityQuery;
exports.useCodegenGeneratedPoolVolumeVolumeBreakdown_24HoursQuery = useCodegenGeneratedPoolVolumeVolumeBreakdown_24HoursQuery;
exports.useCodegenGeneratedPoolVolumeVolumeBreakdown_24HoursLazyQuery = useCodegenGeneratedPoolVolumeVolumeBreakdown_24HoursLazyQuery;
exports.refetchCodegenGeneratedPoolVolumeVolumeBreakdown_24HoursQuery = refetchCodegenGeneratedPoolVolumeVolumeBreakdown_24HoursQuery;
exports.useCodegenGeneratedPoolVolumeQuery = useCodegenGeneratedPoolVolumeQuery;
exports.useCodegenGeneratedPoolVolumeLazyQuery = useCodegenGeneratedPoolVolumeLazyQuery;
exports.refetchCodegenGeneratedPoolVolumeQuery = refetchCodegenGeneratedPoolVolumeQuery;
exports.useCodegenGeneratedPoolQuery = useCodegenGeneratedPoolQuery;
exports.useCodegenGeneratedPoolLazyQuery = useCodegenGeneratedPoolLazyQuery;
exports.refetchCodegenGeneratedPoolQuery = refetchCodegenGeneratedPoolQuery;
exports.useCodegenGeneratedRouterAllChainsQuery = useCodegenGeneratedRouterAllChainsQuery;
exports.useCodegenGeneratedRouterAllChainsLazyQuery = useCodegenGeneratedRouterAllChainsLazyQuery;
exports.refetchCodegenGeneratedRouterAllChainsQuery = refetchCodegenGeneratedRouterAllChainsQuery;
exports.useCodegenGeneratedRouterAllEscrowsQuery = useCodegenGeneratedRouterAllEscrowsQuery;
exports.useCodegenGeneratedRouterAllEscrowsLazyQuery = useCodegenGeneratedRouterAllEscrowsLazyQuery;
exports.refetchCodegenGeneratedRouterAllEscrowsQuery = refetchCodegenGeneratedRouterAllEscrowsQuery;
exports.useCodegenGeneratedRouterAllTokensQuery = useCodegenGeneratedRouterAllTokensQuery;
exports.useCodegenGeneratedRouterAllTokensLazyQuery = useCodegenGeneratedRouterAllTokensLazyQuery;
exports.refetchCodegenGeneratedRouterAllTokensQuery = refetchCodegenGeneratedRouterAllTokensQuery;
exports.useCodegenGeneratedRouterAllVlpsVlpsQuery = useCodegenGeneratedRouterAllVlpsVlpsQuery;
exports.useCodegenGeneratedRouterAllVlpsVlpsLazyQuery = useCodegenGeneratedRouterAllVlpsVlpsLazyQuery;
exports.refetchCodegenGeneratedRouterAllVlpsVlpsQuery = refetchCodegenGeneratedRouterAllVlpsVlpsQuery;
exports.useCodegenGeneratedRouterAllVlpsQuery = useCodegenGeneratedRouterAllVlpsQuery;
exports.useCodegenGeneratedRouterAllVlpsLazyQuery = useCodegenGeneratedRouterAllVlpsLazyQuery;
exports.refetchCodegenGeneratedRouterAllVlpsQuery = refetchCodegenGeneratedRouterAllVlpsQuery;
exports.useCodegenGeneratedRouterChainChainChainTypeIbcQuery = useCodegenGeneratedRouterChainChainChainTypeIbcQuery;
exports.useCodegenGeneratedRouterChainChainChainTypeIbcLazyQuery = useCodegenGeneratedRouterChainChainChainTypeIbcLazyQuery;
exports.refetchCodegenGeneratedRouterChainChainChainTypeIbcQuery = refetchCodegenGeneratedRouterChainChainChainTypeIbcQuery;
exports.useCodegenGeneratedRouterChainChainChainTypeQuery = useCodegenGeneratedRouterChainChainChainTypeQuery;
exports.useCodegenGeneratedRouterChainChainChainTypeLazyQuery = useCodegenGeneratedRouterChainChainChainTypeLazyQuery;
exports.refetchCodegenGeneratedRouterChainChainChainTypeQuery = refetchCodegenGeneratedRouterChainChainChainTypeQuery;
exports.useCodegenGeneratedRouterChainChainQuery = useCodegenGeneratedRouterChainChainQuery;
exports.useCodegenGeneratedRouterChainChainLazyQuery = useCodegenGeneratedRouterChainChainLazyQuery;
exports.refetchCodegenGeneratedRouterChainChainQuery = refetchCodegenGeneratedRouterChainChainQuery;
exports.useCodegenGeneratedRouterChainQuery = useCodegenGeneratedRouterChainQuery;
exports.useCodegenGeneratedRouterChainLazyQuery = useCodegenGeneratedRouterChainLazyQuery;
exports.refetchCodegenGeneratedRouterChainQuery = refetchCodegenGeneratedRouterChainQuery;
exports.useCodegenGeneratedRouterEscrowsQuery = useCodegenGeneratedRouterEscrowsQuery;
exports.useCodegenGeneratedRouterEscrowsLazyQuery = useCodegenGeneratedRouterEscrowsLazyQuery;
exports.refetchCodegenGeneratedRouterEscrowsQuery = refetchCodegenGeneratedRouterEscrowsQuery;
exports.useCodegenGeneratedRouterSimulateReleaseEscrowReleaseAmountsCrossChainUserUserQuery = useCodegenGeneratedRouterSimulateReleaseEscrowReleaseAmountsCrossChainUserUserQuery;
exports.useCodegenGeneratedRouterSimulateReleaseEscrowReleaseAmountsCrossChainUserUserLazyQuery = useCodegenGeneratedRouterSimulateReleaseEscrowReleaseAmountsCrossChainUserUserLazyQuery;
exports.refetchCodegenGeneratedRouterSimulateReleaseEscrowReleaseAmountsCrossChainUserUserQuery = refetchCodegenGeneratedRouterSimulateReleaseEscrowReleaseAmountsCrossChainUserUserQuery;
exports.useCodegenGeneratedRouterSimulateReleaseEscrowReleaseAmountsCrossChainUserQuery = useCodegenGeneratedRouterSimulateReleaseEscrowReleaseAmountsCrossChainUserQuery;
exports.useCodegenGeneratedRouterSimulateReleaseEscrowReleaseAmountsCrossChainUserLazyQuery = useCodegenGeneratedRouterSimulateReleaseEscrowReleaseAmountsCrossChainUserLazyQuery;
exports.refetchCodegenGeneratedRouterSimulateReleaseEscrowReleaseAmountsCrossChainUserQuery = refetchCodegenGeneratedRouterSimulateReleaseEscrowReleaseAmountsCrossChainUserQuery;
exports.useCodegenGeneratedRouterSimulateReleaseEscrowReleaseAmountsQuery = useCodegenGeneratedRouterSimulateReleaseEscrowReleaseAmountsQuery;
exports.useCodegenGeneratedRouterSimulateReleaseEscrowReleaseAmountsLazyQuery = useCodegenGeneratedRouterSimulateReleaseEscrowReleaseAmountsLazyQuery;
exports.refetchCodegenGeneratedRouterSimulateReleaseEscrowReleaseAmountsQuery = refetchCodegenGeneratedRouterSimulateReleaseEscrowReleaseAmountsQuery;
exports.useCodegenGeneratedRouterSimulateReleaseEscrowQuery = useCodegenGeneratedRouterSimulateReleaseEscrowQuery;
exports.useCodegenGeneratedRouterSimulateReleaseEscrowLazyQuery = useCodegenGeneratedRouterSimulateReleaseEscrowLazyQuery;
exports.refetchCodegenGeneratedRouterSimulateReleaseEscrowQuery = refetchCodegenGeneratedRouterSimulateReleaseEscrowQuery;
exports.useCodegenGeneratedRouterSimulateSwapQuery = useCodegenGeneratedRouterSimulateSwapQuery;
exports.useCodegenGeneratedRouterSimulateSwapLazyQuery = useCodegenGeneratedRouterSimulateSwapLazyQuery;
exports.refetchCodegenGeneratedRouterSimulateSwapQuery = refetchCodegenGeneratedRouterSimulateSwapQuery;
exports.useCodegenGeneratedRouterStateQuery = useCodegenGeneratedRouterStateQuery;
exports.useCodegenGeneratedRouterStateLazyQuery = useCodegenGeneratedRouterStateLazyQuery;
exports.refetchCodegenGeneratedRouterStateQuery = refetchCodegenGeneratedRouterStateQuery;
exports.useCodegenGeneratedRouterTokenDenomsDenomsQuery = useCodegenGeneratedRouterTokenDenomsDenomsQuery;
exports.useCodegenGeneratedRouterTokenDenomsDenomsLazyQuery = useCodegenGeneratedRouterTokenDenomsDenomsLazyQuery;
exports.refetchCodegenGeneratedRouterTokenDenomsDenomsQuery = refetchCodegenGeneratedRouterTokenDenomsDenomsQuery;
exports.useCodegenGeneratedRouterTokenDenomsQuery = useCodegenGeneratedRouterTokenDenomsQuery;
exports.useCodegenGeneratedRouterTokenDenomsLazyQuery = useCodegenGeneratedRouterTokenDenomsLazyQuery;
exports.refetchCodegenGeneratedRouterTokenDenomsQuery = refetchCodegenGeneratedRouterTokenDenomsQuery;
exports.useCodegenGeneratedRouterTokenPairsFromVlpQuery = useCodegenGeneratedRouterTokenPairsFromVlpQuery;
exports.useCodegenGeneratedRouterTokenPairsFromVlpLazyQuery = useCodegenGeneratedRouterTokenPairsFromVlpLazyQuery;
exports.refetchCodegenGeneratedRouterTokenPairsFromVlpQuery = refetchCodegenGeneratedRouterTokenPairsFromVlpQuery;
exports.useCodegenGeneratedRouterVlpQuery = useCodegenGeneratedRouterVlpQuery;
exports.useCodegenGeneratedRouterVlpLazyQuery = useCodegenGeneratedRouterVlpLazyQuery;
exports.refetchCodegenGeneratedRouterVlpQuery = refetchCodegenGeneratedRouterVlpQuery;
exports.useCodegenGeneratedRouterQuery = useCodegenGeneratedRouterQuery;
exports.useCodegenGeneratedRouterLazyQuery = useCodegenGeneratedRouterLazyQuery;
exports.refetchCodegenGeneratedRouterQuery = refetchCodegenGeneratedRouterQuery;
exports.useCodegenGeneratedTokenAllDexesQuery = useCodegenGeneratedTokenAllDexesQuery;
exports.useCodegenGeneratedTokenAllDexesLazyQuery = useCodegenGeneratedTokenAllDexesLazyQuery;
exports.refetchCodegenGeneratedTokenAllDexesQuery = refetchCodegenGeneratedTokenAllDexesQuery;
exports.useCodegenGeneratedTokenChainsForTokenLaunchQuery = useCodegenGeneratedTokenChainsForTokenLaunchQuery;
exports.useCodegenGeneratedTokenChainsForTokenLaunchLazyQuery = useCodegenGeneratedTokenChainsForTokenLaunchLazyQuery;
exports.refetchCodegenGeneratedTokenChainsForTokenLaunchQuery = refetchCodegenGeneratedTokenChainsForTokenLaunchQuery;
exports.useCodegenGeneratedTokenDexMetadataQuery = useCodegenGeneratedTokenDexMetadataQuery;
exports.useCodegenGeneratedTokenDexMetadataLazyQuery = useCodegenGeneratedTokenDexMetadataLazyQuery;
exports.refetchCodegenGeneratedTokenDexMetadataQuery = refetchCodegenGeneratedTokenDexMetadataQuery;
exports.useCodegenGeneratedTokenGetAllFaucetsQuery = useCodegenGeneratedTokenGetAllFaucetsQuery;
exports.useCodegenGeneratedTokenGetAllFaucetsLazyQuery = useCodegenGeneratedTokenGetAllFaucetsLazyQuery;
exports.refetchCodegenGeneratedTokenGetAllFaucetsQuery = refetchCodegenGeneratedTokenGetAllFaucetsQuery;
exports.useCodegenGeneratedTokenTokenDenomsDenomsQuery = useCodegenGeneratedTokenTokenDenomsDenomsQuery;
exports.useCodegenGeneratedTokenTokenDenomsDenomsLazyQuery = useCodegenGeneratedTokenTokenDenomsDenomsLazyQuery;
exports.refetchCodegenGeneratedTokenTokenDenomsDenomsQuery = refetchCodegenGeneratedTokenTokenDenomsDenomsQuery;
exports.useCodegenGeneratedTokenTokenDenomsQuery = useCodegenGeneratedTokenTokenDenomsQuery;
exports.useCodegenGeneratedTokenTokenDenomsLazyQuery = useCodegenGeneratedTokenTokenDenomsLazyQuery;
exports.refetchCodegenGeneratedTokenTokenDenomsQuery = refetchCodegenGeneratedTokenTokenDenomsQuery;
exports.useCodegenGeneratedTokenTokenLiquiditiesQuery = useCodegenGeneratedTokenTokenLiquiditiesQuery;
exports.useCodegenGeneratedTokenTokenLiquiditiesLazyQuery = useCodegenGeneratedTokenTokenLiquiditiesLazyQuery;
exports.refetchCodegenGeneratedTokenTokenLiquiditiesQuery = refetchCodegenGeneratedTokenTokenLiquiditiesQuery;
exports.useCodegenGeneratedTokenTokenLiquidityQuery = useCodegenGeneratedTokenTokenLiquidityQuery;
exports.useCodegenGeneratedTokenTokenLiquidityLazyQuery = useCodegenGeneratedTokenTokenLiquidityLazyQuery;
exports.refetchCodegenGeneratedTokenTokenLiquidityQuery = refetchCodegenGeneratedTokenTokenLiquidityQuery;
exports.useCodegenGeneratedTokenTokenMetadataByIdQuery = useCodegenGeneratedTokenTokenMetadataByIdQuery;
exports.useCodegenGeneratedTokenTokenMetadataByIdLazyQuery = useCodegenGeneratedTokenTokenMetadataByIdLazyQuery;
exports.refetchCodegenGeneratedTokenTokenMetadataByIdQuery = refetchCodegenGeneratedTokenTokenMetadataByIdQuery;
exports.useCodegenGeneratedTokenTokenMetadatasQuery = useCodegenGeneratedTokenTokenMetadatasQuery;
exports.useCodegenGeneratedTokenTokenMetadatasLazyQuery = useCodegenGeneratedTokenTokenMetadatasLazyQuery;
exports.refetchCodegenGeneratedTokenTokenMetadatasQuery = refetchCodegenGeneratedTokenTokenMetadatasQuery;
exports.useCodegenGeneratedTokenTokensMetadataQuery = useCodegenGeneratedTokenTokensMetadataQuery;
exports.useCodegenGeneratedTokenTokensMetadataLazyQuery = useCodegenGeneratedTokenTokensMetadataLazyQuery;
exports.refetchCodegenGeneratedTokenTokensMetadataQuery = refetchCodegenGeneratedTokenTokensMetadataQuery;
exports.useCodegenGeneratedTokenQuery = useCodegenGeneratedTokenQuery;
exports.useCodegenGeneratedTokenLazyQuery = useCodegenGeneratedTokenLazyQuery;
exports.refetchCodegenGeneratedTokenQuery = refetchCodegenGeneratedTokenQuery;
exports.useCodegenGeneratedVcoinBalanceQuery = useCodegenGeneratedVcoinBalanceQuery;
exports.useCodegenGeneratedVcoinBalanceLazyQuery = useCodegenGeneratedVcoinBalanceLazyQuery;
exports.refetchCodegenGeneratedVcoinBalanceQuery = refetchCodegenGeneratedVcoinBalanceQuery;
exports.useCodegenGeneratedVcoinStateQuery = useCodegenGeneratedVcoinStateQuery;
exports.useCodegenGeneratedVcoinStateLazyQuery = useCodegenGeneratedVcoinStateLazyQuery;
exports.refetchCodegenGeneratedVcoinStateQuery = refetchCodegenGeneratedVcoinStateQuery;
exports.useCodegenGeneratedVcoinUserBalanceBalancesQuery = useCodegenGeneratedVcoinUserBalanceBalancesQuery;
exports.useCodegenGeneratedVcoinUserBalanceBalancesLazyQuery = useCodegenGeneratedVcoinUserBalanceBalancesLazyQuery;
exports.refetchCodegenGeneratedVcoinUserBalanceBalancesQuery = refetchCodegenGeneratedVcoinUserBalanceBalancesQuery;
exports.useCodegenGeneratedVcoinUserBalanceQuery = useCodegenGeneratedVcoinUserBalanceQuery;
exports.useCodegenGeneratedVcoinUserBalanceLazyQuery = useCodegenGeneratedVcoinUserBalanceLazyQuery;
exports.refetchCodegenGeneratedVcoinUserBalanceQuery = refetchCodegenGeneratedVcoinUserBalanceQuery;
exports.useCodegenGeneratedVcoinQuery = useCodegenGeneratedVcoinQuery;
exports.useCodegenGeneratedVcoinLazyQuery = useCodegenGeneratedVcoinLazyQuery;
exports.refetchCodegenGeneratedVcoinQuery = refetchCodegenGeneratedVcoinQuery;
exports.useCodegenGeneratedVlpAllPoolsPaginationQuery = useCodegenGeneratedVlpAllPoolsPaginationQuery;
exports.useCodegenGeneratedVlpAllPoolsPaginationLazyQuery = useCodegenGeneratedVlpAllPoolsPaginationLazyQuery;
exports.refetchCodegenGeneratedVlpAllPoolsPaginationQuery = refetchCodegenGeneratedVlpAllPoolsPaginationQuery;
exports.useCodegenGeneratedVlpAllPoolsPoolsPoolQuery = useCodegenGeneratedVlpAllPoolsPoolsPoolQuery;
exports.useCodegenGeneratedVlpAllPoolsPoolsPoolLazyQuery = useCodegenGeneratedVlpAllPoolsPoolsPoolLazyQuery;
exports.refetchCodegenGeneratedVlpAllPoolsPoolsPoolQuery = refetchCodegenGeneratedVlpAllPoolsPoolsPoolQuery;
exports.useCodegenGeneratedVlpAllPoolsPoolsQuery = useCodegenGeneratedVlpAllPoolsPoolsQuery;
exports.useCodegenGeneratedVlpAllPoolsPoolsLazyQuery = useCodegenGeneratedVlpAllPoolsPoolsLazyQuery;
exports.refetchCodegenGeneratedVlpAllPoolsPoolsQuery = refetchCodegenGeneratedVlpAllPoolsPoolsQuery;
exports.useCodegenGeneratedVlpAllPoolsQuery = useCodegenGeneratedVlpAllPoolsQuery;
exports.useCodegenGeneratedVlpAllPoolsLazyQuery = useCodegenGeneratedVlpAllPoolsLazyQuery;
exports.refetchCodegenGeneratedVlpAllPoolsQuery = refetchCodegenGeneratedVlpAllPoolsQuery;
exports.useCodegenGeneratedVlpFeeRecipientQuery = useCodegenGeneratedVlpFeeRecipientQuery;
exports.useCodegenGeneratedVlpFeeRecipientLazyQuery = useCodegenGeneratedVlpFeeRecipientLazyQuery;
exports.refetchCodegenGeneratedVlpFeeRecipientQuery = refetchCodegenGeneratedVlpFeeRecipientQuery;
exports.useCodegenGeneratedVlpFeeQuery = useCodegenGeneratedVlpFeeQuery;
exports.useCodegenGeneratedVlpFeeLazyQuery = useCodegenGeneratedVlpFeeLazyQuery;
exports.refetchCodegenGeneratedVlpFeeQuery = refetchCodegenGeneratedVlpFeeQuery;
exports.useCodegenGeneratedVlpLiquidityPairQuery = useCodegenGeneratedVlpLiquidityPairQuery;
exports.useCodegenGeneratedVlpLiquidityPairLazyQuery = useCodegenGeneratedVlpLiquidityPairLazyQuery;
exports.refetchCodegenGeneratedVlpLiquidityPairQuery = refetchCodegenGeneratedVlpLiquidityPairQuery;
exports.useCodegenGeneratedVlpLiquidityQuery = useCodegenGeneratedVlpLiquidityQuery;
exports.useCodegenGeneratedVlpLiquidityLazyQuery = useCodegenGeneratedVlpLiquidityLazyQuery;
exports.refetchCodegenGeneratedVlpLiquidityQuery = refetchCodegenGeneratedVlpLiquidityQuery;
exports.useCodegenGeneratedVlpPoolQuery = useCodegenGeneratedVlpPoolQuery;
exports.useCodegenGeneratedVlpPoolLazyQuery = useCodegenGeneratedVlpPoolLazyQuery;
exports.refetchCodegenGeneratedVlpPoolQuery = refetchCodegenGeneratedVlpPoolQuery;
exports.useCodegenGeneratedVlpStateFeeRecipientQuery = useCodegenGeneratedVlpStateFeeRecipientQuery;
exports.useCodegenGeneratedVlpStateFeeRecipientLazyQuery = useCodegenGeneratedVlpStateFeeRecipientLazyQuery;
exports.refetchCodegenGeneratedVlpStateFeeRecipientQuery = refetchCodegenGeneratedVlpStateFeeRecipientQuery;
exports.useCodegenGeneratedVlpStateFeeQuery = useCodegenGeneratedVlpStateFeeQuery;
exports.useCodegenGeneratedVlpStateFeeLazyQuery = useCodegenGeneratedVlpStateFeeLazyQuery;
exports.refetchCodegenGeneratedVlpStateFeeQuery = refetchCodegenGeneratedVlpStateFeeQuery;
exports.useCodegenGeneratedVlpStatePairQuery = useCodegenGeneratedVlpStatePairQuery;
exports.useCodegenGeneratedVlpStatePairLazyQuery = useCodegenGeneratedVlpStatePairLazyQuery;
exports.refetchCodegenGeneratedVlpStatePairQuery = refetchCodegenGeneratedVlpStatePairQuery;
exports.useCodegenGeneratedVlpStatePoolConfigStableQuery = useCodegenGeneratedVlpStatePoolConfigStableQuery;
exports.useCodegenGeneratedVlpStatePoolConfigStableLazyQuery = useCodegenGeneratedVlpStatePoolConfigStableLazyQuery;
exports.refetchCodegenGeneratedVlpStatePoolConfigStableQuery = refetchCodegenGeneratedVlpStatePoolConfigStableQuery;
exports.useCodegenGeneratedVlpStatePoolConfigQuery = useCodegenGeneratedVlpStatePoolConfigQuery;
exports.useCodegenGeneratedVlpStatePoolConfigLazyQuery = useCodegenGeneratedVlpStatePoolConfigLazyQuery;
exports.refetchCodegenGeneratedVlpStatePoolConfigQuery = refetchCodegenGeneratedVlpStatePoolConfigQuery;
exports.useCodegenGeneratedVlpStateQuery = useCodegenGeneratedVlpStateQuery;
exports.useCodegenGeneratedVlpStateLazyQuery = useCodegenGeneratedVlpStateLazyQuery;
exports.refetchCodegenGeneratedVlpStateQuery = refetchCodegenGeneratedVlpStateQuery;
exports.useCodegenGeneratedVlpTotalFeesCollectedEuclidFeesTotalsQuery = useCodegenGeneratedVlpTotalFeesCollectedEuclidFeesTotalsQuery;
exports.useCodegenGeneratedVlpTotalFeesCollectedEuclidFeesTotalsLazyQuery = useCodegenGeneratedVlpTotalFeesCollectedEuclidFeesTotalsLazyQuery;
exports.refetchCodegenGeneratedVlpTotalFeesCollectedEuclidFeesTotalsQuery = refetchCodegenGeneratedVlpTotalFeesCollectedEuclidFeesTotalsQuery;
exports.useCodegenGeneratedVlpTotalFeesCollectedEuclidFeesQuery = useCodegenGeneratedVlpTotalFeesCollectedEuclidFeesQuery;
exports.useCodegenGeneratedVlpTotalFeesCollectedEuclidFeesLazyQuery = useCodegenGeneratedVlpTotalFeesCollectedEuclidFeesLazyQuery;
exports.refetchCodegenGeneratedVlpTotalFeesCollectedEuclidFeesQuery = refetchCodegenGeneratedVlpTotalFeesCollectedEuclidFeesQuery;
exports.useCodegenGeneratedVlpTotalFeesCollectedLpFeesTotalsQuery = useCodegenGeneratedVlpTotalFeesCollectedLpFeesTotalsQuery;
exports.useCodegenGeneratedVlpTotalFeesCollectedLpFeesTotalsLazyQuery = useCodegenGeneratedVlpTotalFeesCollectedLpFeesTotalsLazyQuery;
exports.refetchCodegenGeneratedVlpTotalFeesCollectedLpFeesTotalsQuery = refetchCodegenGeneratedVlpTotalFeesCollectedLpFeesTotalsQuery;
exports.useCodegenGeneratedVlpTotalFeesCollectedLpFeesQuery = useCodegenGeneratedVlpTotalFeesCollectedLpFeesQuery;
exports.useCodegenGeneratedVlpTotalFeesCollectedLpFeesLazyQuery = useCodegenGeneratedVlpTotalFeesCollectedLpFeesLazyQuery;
exports.refetchCodegenGeneratedVlpTotalFeesCollectedLpFeesQuery = refetchCodegenGeneratedVlpTotalFeesCollectedLpFeesQuery;
exports.useCodegenGeneratedVlpTotalFeesCollectedQuery = useCodegenGeneratedVlpTotalFeesCollectedQuery;
exports.useCodegenGeneratedVlpTotalFeesCollectedLazyQuery = useCodegenGeneratedVlpTotalFeesCollectedLazyQuery;
exports.refetchCodegenGeneratedVlpTotalFeesCollectedQuery = refetchCodegenGeneratedVlpTotalFeesCollectedQuery;
exports.useCodegenGeneratedVlpTotalFeesCollectedPerDenomQuery = useCodegenGeneratedVlpTotalFeesCollectedPerDenomQuery;
exports.useCodegenGeneratedVlpTotalFeesCollectedPerDenomLazyQuery = useCodegenGeneratedVlpTotalFeesCollectedPerDenomLazyQuery;
exports.refetchCodegenGeneratedVlpTotalFeesCollectedPerDenomQuery = refetchCodegenGeneratedVlpTotalFeesCollectedPerDenomQuery;
exports.useCodegenGeneratedVlpQuery = useCodegenGeneratedVlpQuery;
exports.useCodegenGeneratedVlpLazyQuery = useCodegenGeneratedVlpLazyQuery;
exports.refetchCodegenGeneratedVlpQuery = refetchCodegenGeneratedVlpQuery;
const client_1 = require("@apollo/client");
const Apollo = __importStar(require("@apollo/client"));
const defaultOptions = {};
var ISortOrder;
(function (ISortOrder) {
    ISortOrder["ASC"] = "ASC";
    ISortOrder["DESC"] = "DESC";
})(ISortOrder || (exports.ISortOrder = ISortOrder = {}));
var ITokenPairSortBy;
(function (ITokenPairSortBy) {
    ITokenPairSortBy["CREATED_AT"] = "CREATED_AT";
    ITokenPairSortBy["TOTAL_LIQUIDITY"] = "TOTAL_LIQUIDITY";
})(ITokenPairSortBy || (exports.ITokenPairSortBy = ITokenPairSortBy = {}));
exports.CodegenGeneratedChainsAllChainsDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_CHAINS_ALL_CHAINS($chains_all_chains_show_all_chains: Boolean, $chains_all_chains_type: String) {
  chains {
    all_chains(
      show_all_chains: $chains_all_chains_show_all_chains
      type: $chains_all_chains_type
    ) {
      chain_id
      chain_uid
      display_name
      explorer_url
      factory_address
      logo
      token_factory_address
      type
    }
  }
}
    `;
/**
 * __useCodegenGeneratedChainsAllChainsQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedChainsAllChainsQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedChainsAllChainsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedChainsAllChainsQuery({
 *   variables: {
 *      chains_all_chains_show_all_chains: // value for 'chains_all_chains_show_all_chains'
 *      chains_all_chains_type: // value for 'chains_all_chains_type'
 *   },
 * });
 */
function useCodegenGeneratedChainsAllChainsQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedChainsAllChainsDocument, options);
}
function useCodegenGeneratedChainsAllChainsLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedChainsAllChainsDocument, options);
}
function refetchCodegenGeneratedChainsAllChainsQuery(variables) {
    return { query: exports.CodegenGeneratedChainsAllChainsDocument, variables: variables };
}
exports.CodegenGeneratedChainsAllEvmChainsNativeCurrencyDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_CHAINS_ALL_EVM_CHAINS_NATIVE_CURRENCY {
  chains {
    all_evm_chains {
      native_currency {
        decimals
        name
        symbol
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedChainsAllEvmChainsNativeCurrencyQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedChainsAllEvmChainsNativeCurrencyQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedChainsAllEvmChainsNativeCurrencyQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedChainsAllEvmChainsNativeCurrencyQuery({
 *   variables: {
 *   },
 * });
 */
function useCodegenGeneratedChainsAllEvmChainsNativeCurrencyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedChainsAllEvmChainsNativeCurrencyDocument, options);
}
function useCodegenGeneratedChainsAllEvmChainsNativeCurrencyLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedChainsAllEvmChainsNativeCurrencyDocument, options);
}
function refetchCodegenGeneratedChainsAllEvmChainsNativeCurrencyQuery(variables) {
    return { query: exports.CodegenGeneratedChainsAllEvmChainsNativeCurrencyDocument, variables: variables };
}
exports.CodegenGeneratedChainsAllEvmChainsRpcUrlsDefaultDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_CHAINS_ALL_EVM_CHAINS_RPC_URLS_DEFAULT {
  chains {
    all_evm_chains {
      rpc_urls {
        default {
          http
        }
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedChainsAllEvmChainsRpcUrlsDefaultQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedChainsAllEvmChainsRpcUrlsDefaultQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedChainsAllEvmChainsRpcUrlsDefaultQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedChainsAllEvmChainsRpcUrlsDefaultQuery({
 *   variables: {
 *   },
 * });
 */
function useCodegenGeneratedChainsAllEvmChainsRpcUrlsDefaultQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedChainsAllEvmChainsRpcUrlsDefaultDocument, options);
}
function useCodegenGeneratedChainsAllEvmChainsRpcUrlsDefaultLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedChainsAllEvmChainsRpcUrlsDefaultDocument, options);
}
function refetchCodegenGeneratedChainsAllEvmChainsRpcUrlsDefaultQuery(variables) {
    return { query: exports.CodegenGeneratedChainsAllEvmChainsRpcUrlsDefaultDocument, variables: variables };
}
exports.CodegenGeneratedChainsAllEvmChainsRpcUrlsDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_CHAINS_ALL_EVM_CHAINS_RPC_URLS {
  chains {
    all_evm_chains {
      rpc_urls {
        default {
          http
        }
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedChainsAllEvmChainsRpcUrlsQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedChainsAllEvmChainsRpcUrlsQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedChainsAllEvmChainsRpcUrlsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedChainsAllEvmChainsRpcUrlsQuery({
 *   variables: {
 *   },
 * });
 */
function useCodegenGeneratedChainsAllEvmChainsRpcUrlsQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedChainsAllEvmChainsRpcUrlsDocument, options);
}
function useCodegenGeneratedChainsAllEvmChainsRpcUrlsLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedChainsAllEvmChainsRpcUrlsDocument, options);
}
function refetchCodegenGeneratedChainsAllEvmChainsRpcUrlsQuery(variables) {
    return { query: exports.CodegenGeneratedChainsAllEvmChainsRpcUrlsDocument, variables: variables };
}
exports.CodegenGeneratedChainsAllEvmChainsDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_CHAINS_ALL_EVM_CHAINS {
  chains {
    all_evm_chains {
      chain_id
      chain_uid
      explorer_url
      name
      native_currency {
        decimals
        name
        symbol
      }
      rpc_urls {
        default {
          http
        }
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedChainsAllEvmChainsQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedChainsAllEvmChainsQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedChainsAllEvmChainsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedChainsAllEvmChainsQuery({
 *   variables: {
 *   },
 * });
 */
function useCodegenGeneratedChainsAllEvmChainsQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedChainsAllEvmChainsDocument, options);
}
function useCodegenGeneratedChainsAllEvmChainsLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedChainsAllEvmChainsDocument, options);
}
function refetchCodegenGeneratedChainsAllEvmChainsQuery(variables) {
    return { query: exports.CodegenGeneratedChainsAllEvmChainsDocument, variables: variables };
}
exports.CodegenGeneratedChainsChainConfigDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_CHAINS_CHAIN_CONFIG($chains_chain_config_chain_id: String, $chains_chain_config_chain_uid: String) {
  chains {
    chain_config(
      chain_id: $chains_chain_config_chain_id
      chain_uid: $chains_chain_config_chain_uid
    ) {
      chain_id
      chain_uid
      display_name
      explorer_url
      factory_address
      logo
      token_factory_address
      type
    }
  }
}
    `;
/**
 * __useCodegenGeneratedChainsChainConfigQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedChainsChainConfigQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedChainsChainConfigQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedChainsChainConfigQuery({
 *   variables: {
 *      chains_chain_config_chain_id: // value for 'chains_chain_config_chain_id'
 *      chains_chain_config_chain_uid: // value for 'chains_chain_config_chain_uid'
 *   },
 * });
 */
function useCodegenGeneratedChainsChainConfigQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedChainsChainConfigDocument, options);
}
function useCodegenGeneratedChainsChainConfigLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedChainsChainConfigDocument, options);
}
function refetchCodegenGeneratedChainsChainConfigQuery(variables) {
    return { query: exports.CodegenGeneratedChainsChainConfigDocument, variables: variables };
}
exports.CodegenGeneratedChainsContractsDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_CHAINS_CONTRACTS($chains_contracts_chainUId: String, $chains_contracts_type: String) {
  chains {
    contracts(chainUId: $chains_contracts_chainUId, type: $chains_contracts_type) {
      ChainUID
      ContractAddress
      Type
    }
  }
}
    `;
/**
 * __useCodegenGeneratedChainsContractsQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedChainsContractsQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedChainsContractsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedChainsContractsQuery({
 *   variables: {
 *      chains_contracts_chainUId: // value for 'chains_contracts_chainUId'
 *      chains_contracts_type: // value for 'chains_contracts_type'
 *   },
 * });
 */
function useCodegenGeneratedChainsContractsQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedChainsContractsDocument, options);
}
function useCodegenGeneratedChainsContractsLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedChainsContractsDocument, options);
}
function refetchCodegenGeneratedChainsContractsQuery(variables) {
    return { query: exports.CodegenGeneratedChainsContractsDocument, variables: variables };
}
exports.CodegenGeneratedChainsEvmChainConfigNativeCurrencyDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_CHAINS_EVM_CHAIN_CONFIG_NATIVE_CURRENCY($chains_evm_chain_config_chain_id: String, $chains_evm_chain_config_chain_uid: String) {
  chains {
    evm_chain_config(
      chain_id: $chains_evm_chain_config_chain_id
      chain_uid: $chains_evm_chain_config_chain_uid
    ) {
      native_currency {
        decimals
        name
        symbol
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedChainsEvmChainConfigNativeCurrencyQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedChainsEvmChainConfigNativeCurrencyQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedChainsEvmChainConfigNativeCurrencyQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedChainsEvmChainConfigNativeCurrencyQuery({
 *   variables: {
 *      chains_evm_chain_config_chain_id: // value for 'chains_evm_chain_config_chain_id'
 *      chains_evm_chain_config_chain_uid: // value for 'chains_evm_chain_config_chain_uid'
 *   },
 * });
 */
function useCodegenGeneratedChainsEvmChainConfigNativeCurrencyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedChainsEvmChainConfigNativeCurrencyDocument, options);
}
function useCodegenGeneratedChainsEvmChainConfigNativeCurrencyLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedChainsEvmChainConfigNativeCurrencyDocument, options);
}
function refetchCodegenGeneratedChainsEvmChainConfigNativeCurrencyQuery(variables) {
    return { query: exports.CodegenGeneratedChainsEvmChainConfigNativeCurrencyDocument, variables: variables };
}
exports.CodegenGeneratedChainsEvmChainConfigRpcUrlsDefaultDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_CHAINS_EVM_CHAIN_CONFIG_RPC_URLS_DEFAULT($chains_evm_chain_config_chain_id: String, $chains_evm_chain_config_chain_uid: String) {
  chains {
    evm_chain_config(
      chain_id: $chains_evm_chain_config_chain_id
      chain_uid: $chains_evm_chain_config_chain_uid
    ) {
      rpc_urls {
        default {
          http
        }
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedChainsEvmChainConfigRpcUrlsDefaultQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedChainsEvmChainConfigRpcUrlsDefaultQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedChainsEvmChainConfigRpcUrlsDefaultQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedChainsEvmChainConfigRpcUrlsDefaultQuery({
 *   variables: {
 *      chains_evm_chain_config_chain_id: // value for 'chains_evm_chain_config_chain_id'
 *      chains_evm_chain_config_chain_uid: // value for 'chains_evm_chain_config_chain_uid'
 *   },
 * });
 */
function useCodegenGeneratedChainsEvmChainConfigRpcUrlsDefaultQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedChainsEvmChainConfigRpcUrlsDefaultDocument, options);
}
function useCodegenGeneratedChainsEvmChainConfigRpcUrlsDefaultLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedChainsEvmChainConfigRpcUrlsDefaultDocument, options);
}
function refetchCodegenGeneratedChainsEvmChainConfigRpcUrlsDefaultQuery(variables) {
    return { query: exports.CodegenGeneratedChainsEvmChainConfigRpcUrlsDefaultDocument, variables: variables };
}
exports.CodegenGeneratedChainsEvmChainConfigRpcUrlsDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_CHAINS_EVM_CHAIN_CONFIG_RPC_URLS($chains_evm_chain_config_chain_id: String, $chains_evm_chain_config_chain_uid: String) {
  chains {
    evm_chain_config(
      chain_id: $chains_evm_chain_config_chain_id
      chain_uid: $chains_evm_chain_config_chain_uid
    ) {
      rpc_urls {
        default {
          http
        }
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedChainsEvmChainConfigRpcUrlsQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedChainsEvmChainConfigRpcUrlsQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedChainsEvmChainConfigRpcUrlsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedChainsEvmChainConfigRpcUrlsQuery({
 *   variables: {
 *      chains_evm_chain_config_chain_id: // value for 'chains_evm_chain_config_chain_id'
 *      chains_evm_chain_config_chain_uid: // value for 'chains_evm_chain_config_chain_uid'
 *   },
 * });
 */
function useCodegenGeneratedChainsEvmChainConfigRpcUrlsQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedChainsEvmChainConfigRpcUrlsDocument, options);
}
function useCodegenGeneratedChainsEvmChainConfigRpcUrlsLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedChainsEvmChainConfigRpcUrlsDocument, options);
}
function refetchCodegenGeneratedChainsEvmChainConfigRpcUrlsQuery(variables) {
    return { query: exports.CodegenGeneratedChainsEvmChainConfigRpcUrlsDocument, variables: variables };
}
exports.CodegenGeneratedChainsEvmChainConfigDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_CHAINS_EVM_CHAIN_CONFIG($chains_evm_chain_config_chain_id: String, $chains_evm_chain_config_chain_uid: String) {
  chains {
    evm_chain_config(
      chain_id: $chains_evm_chain_config_chain_id
      chain_uid: $chains_evm_chain_config_chain_uid
    ) {
      chain_id
      chain_uid
      explorer_url
      name
      native_currency {
        decimals
        name
        symbol
      }
      rpc_urls {
        default {
          http
        }
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedChainsEvmChainConfigQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedChainsEvmChainConfigQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedChainsEvmChainConfigQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedChainsEvmChainConfigQuery({
 *   variables: {
 *      chains_evm_chain_config_chain_id: // value for 'chains_evm_chain_config_chain_id'
 *      chains_evm_chain_config_chain_uid: // value for 'chains_evm_chain_config_chain_uid'
 *   },
 * });
 */
function useCodegenGeneratedChainsEvmChainConfigQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedChainsEvmChainConfigDocument, options);
}
function useCodegenGeneratedChainsEvmChainConfigLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedChainsEvmChainConfigDocument, options);
}
function refetchCodegenGeneratedChainsEvmChainConfigQuery(variables) {
    return { query: exports.CodegenGeneratedChainsEvmChainConfigDocument, variables: variables };
}
exports.CodegenGeneratedChainsKeplrConfigBech32ConfigDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_CHAINS_KEPLR_CONFIG_BECH32CONFIG($chains_keplr_config_chain_id: String, $chains_keplr_config_chain_uid: String) {
  chains {
    keplr_config(
      chain_id: $chains_keplr_config_chain_id
      chain_uid: $chains_keplr_config_chain_uid
    ) {
      bech32Config {
        bech32PrefixAccAddr
        bech32PrefixAccPub
        bech32PrefixConsAddr
        bech32PrefixConsPub
        bech32PrefixValAddr
        bech32PrefixValPub
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedChainsKeplrConfigBech32ConfigQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedChainsKeplrConfigBech32ConfigQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedChainsKeplrConfigBech32ConfigQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedChainsKeplrConfigBech32ConfigQuery({
 *   variables: {
 *      chains_keplr_config_chain_id: // value for 'chains_keplr_config_chain_id'
 *      chains_keplr_config_chain_uid: // value for 'chains_keplr_config_chain_uid'
 *   },
 * });
 */
function useCodegenGeneratedChainsKeplrConfigBech32ConfigQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedChainsKeplrConfigBech32ConfigDocument, options);
}
function useCodegenGeneratedChainsKeplrConfigBech32ConfigLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedChainsKeplrConfigBech32ConfigDocument, options);
}
function refetchCodegenGeneratedChainsKeplrConfigBech32ConfigQuery(variables) {
    return { query: exports.CodegenGeneratedChainsKeplrConfigBech32ConfigDocument, variables: variables };
}
exports.CodegenGeneratedChainsKeplrConfigBip44Document = (0, client_1.gql) `
    query CODEGEN_GENERATED_CHAINS_KEPLR_CONFIG_BIP44($chains_keplr_config_chain_id: String, $chains_keplr_config_chain_uid: String) {
  chains {
    keplr_config(
      chain_id: $chains_keplr_config_chain_id
      chain_uid: $chains_keplr_config_chain_uid
    ) {
      bip44 {
        coinType
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedChainsKeplrConfigBip44Query__
 *
 * To run a query within a React component, call `useCodegenGeneratedChainsKeplrConfigBip44Query` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedChainsKeplrConfigBip44Query` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedChainsKeplrConfigBip44Query({
 *   variables: {
 *      chains_keplr_config_chain_id: // value for 'chains_keplr_config_chain_id'
 *      chains_keplr_config_chain_uid: // value for 'chains_keplr_config_chain_uid'
 *   },
 * });
 */
function useCodegenGeneratedChainsKeplrConfigBip44Query(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedChainsKeplrConfigBip44Document, options);
}
function useCodegenGeneratedChainsKeplrConfigBip44LazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedChainsKeplrConfigBip44Document, options);
}
function refetchCodegenGeneratedChainsKeplrConfigBip44Query(variables) {
    return { query: exports.CodegenGeneratedChainsKeplrConfigBip44Document, variables: variables };
}
exports.CodegenGeneratedChainsKeplrConfigCurrenciesDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_CHAINS_KEPLR_CONFIG_CURRENCIES($chains_keplr_config_chain_id: String, $chains_keplr_config_chain_uid: String) {
  chains {
    keplr_config(
      chain_id: $chains_keplr_config_chain_id
      chain_uid: $chains_keplr_config_chain_uid
    ) {
      currencies {
        coinDecimals
        coinDenom
        coinGeckoID
        coinMinimalDenom
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedChainsKeplrConfigCurrenciesQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedChainsKeplrConfigCurrenciesQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedChainsKeplrConfigCurrenciesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedChainsKeplrConfigCurrenciesQuery({
 *   variables: {
 *      chains_keplr_config_chain_id: // value for 'chains_keplr_config_chain_id'
 *      chains_keplr_config_chain_uid: // value for 'chains_keplr_config_chain_uid'
 *   },
 * });
 */
function useCodegenGeneratedChainsKeplrConfigCurrenciesQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedChainsKeplrConfigCurrenciesDocument, options);
}
function useCodegenGeneratedChainsKeplrConfigCurrenciesLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedChainsKeplrConfigCurrenciesDocument, options);
}
function refetchCodegenGeneratedChainsKeplrConfigCurrenciesQuery(variables) {
    return { query: exports.CodegenGeneratedChainsKeplrConfigCurrenciesDocument, variables: variables };
}
exports.CodegenGeneratedChainsKeplrConfigFeecurrenciesGaspricestepDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_CHAINS_KEPLR_CONFIG_FEECURRENCIES_GASPRICESTEP($chains_keplr_config_chain_id: String, $chains_keplr_config_chain_uid: String) {
  chains {
    keplr_config(
      chain_id: $chains_keplr_config_chain_id
      chain_uid: $chains_keplr_config_chain_uid
    ) {
      feeCurrencies {
        gasPriceStep {
          average
          high
          low
        }
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedChainsKeplrConfigFeecurrenciesGaspricestepQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedChainsKeplrConfigFeecurrenciesGaspricestepQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedChainsKeplrConfigFeecurrenciesGaspricestepQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedChainsKeplrConfigFeecurrenciesGaspricestepQuery({
 *   variables: {
 *      chains_keplr_config_chain_id: // value for 'chains_keplr_config_chain_id'
 *      chains_keplr_config_chain_uid: // value for 'chains_keplr_config_chain_uid'
 *   },
 * });
 */
function useCodegenGeneratedChainsKeplrConfigFeecurrenciesGaspricestepQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedChainsKeplrConfigFeecurrenciesGaspricestepDocument, options);
}
function useCodegenGeneratedChainsKeplrConfigFeecurrenciesGaspricestepLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedChainsKeplrConfigFeecurrenciesGaspricestepDocument, options);
}
function refetchCodegenGeneratedChainsKeplrConfigFeecurrenciesGaspricestepQuery(variables) {
    return { query: exports.CodegenGeneratedChainsKeplrConfigFeecurrenciesGaspricestepDocument, variables: variables };
}
exports.CodegenGeneratedChainsKeplrConfigFeecurrenciesDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_CHAINS_KEPLR_CONFIG_FEECURRENCIES($chains_keplr_config_chain_id: String, $chains_keplr_config_chain_uid: String) {
  chains {
    keplr_config(
      chain_id: $chains_keplr_config_chain_id
      chain_uid: $chains_keplr_config_chain_uid
    ) {
      feeCurrencies {
        coinDecimals
        coinDenom
        coinGeckoID
        coinMinimalDenom
        gasPriceStep {
          average
          high
          low
        }
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedChainsKeplrConfigFeecurrenciesQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedChainsKeplrConfigFeecurrenciesQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedChainsKeplrConfigFeecurrenciesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedChainsKeplrConfigFeecurrenciesQuery({
 *   variables: {
 *      chains_keplr_config_chain_id: // value for 'chains_keplr_config_chain_id'
 *      chains_keplr_config_chain_uid: // value for 'chains_keplr_config_chain_uid'
 *   },
 * });
 */
function useCodegenGeneratedChainsKeplrConfigFeecurrenciesQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedChainsKeplrConfigFeecurrenciesDocument, options);
}
function useCodegenGeneratedChainsKeplrConfigFeecurrenciesLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedChainsKeplrConfigFeecurrenciesDocument, options);
}
function refetchCodegenGeneratedChainsKeplrConfigFeecurrenciesQuery(variables) {
    return { query: exports.CodegenGeneratedChainsKeplrConfigFeecurrenciesDocument, variables: variables };
}
exports.CodegenGeneratedChainsKeplrConfigGaspricestepDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_CHAINS_KEPLR_CONFIG_GASPRICESTEP($chains_keplr_config_chain_id: String, $chains_keplr_config_chain_uid: String) {
  chains {
    keplr_config(
      chain_id: $chains_keplr_config_chain_id
      chain_uid: $chains_keplr_config_chain_uid
    ) {
      gasPriceStep {
        average
        high
        low
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedChainsKeplrConfigGaspricestepQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedChainsKeplrConfigGaspricestepQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedChainsKeplrConfigGaspricestepQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedChainsKeplrConfigGaspricestepQuery({
 *   variables: {
 *      chains_keplr_config_chain_id: // value for 'chains_keplr_config_chain_id'
 *      chains_keplr_config_chain_uid: // value for 'chains_keplr_config_chain_uid'
 *   },
 * });
 */
function useCodegenGeneratedChainsKeplrConfigGaspricestepQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedChainsKeplrConfigGaspricestepDocument, options);
}
function useCodegenGeneratedChainsKeplrConfigGaspricestepLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedChainsKeplrConfigGaspricestepDocument, options);
}
function refetchCodegenGeneratedChainsKeplrConfigGaspricestepQuery(variables) {
    return { query: exports.CodegenGeneratedChainsKeplrConfigGaspricestepDocument, variables: variables };
}
exports.CodegenGeneratedChainsKeplrConfigStakecurrencyDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_CHAINS_KEPLR_CONFIG_STAKECURRENCY($chains_keplr_config_chain_id: String, $chains_keplr_config_chain_uid: String) {
  chains {
    keplr_config(
      chain_id: $chains_keplr_config_chain_id
      chain_uid: $chains_keplr_config_chain_uid
    ) {
      stakeCurrency {
        coinDecimals
        coinDenom
        coinGeckoID
        coinMinimalDenom
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedChainsKeplrConfigStakecurrencyQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedChainsKeplrConfigStakecurrencyQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedChainsKeplrConfigStakecurrencyQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedChainsKeplrConfigStakecurrencyQuery({
 *   variables: {
 *      chains_keplr_config_chain_id: // value for 'chains_keplr_config_chain_id'
 *      chains_keplr_config_chain_uid: // value for 'chains_keplr_config_chain_uid'
 *   },
 * });
 */
function useCodegenGeneratedChainsKeplrConfigStakecurrencyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedChainsKeplrConfigStakecurrencyDocument, options);
}
function useCodegenGeneratedChainsKeplrConfigStakecurrencyLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedChainsKeplrConfigStakecurrencyDocument, options);
}
function refetchCodegenGeneratedChainsKeplrConfigStakecurrencyQuery(variables) {
    return { query: exports.CodegenGeneratedChainsKeplrConfigStakecurrencyDocument, variables: variables };
}
exports.CodegenGeneratedChainsKeplrConfigDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_CHAINS_KEPLR_CONFIG($chains_keplr_config_chain_id: String, $chains_keplr_config_chain_uid: String) {
  chains {
    keplr_config(
      chain_id: $chains_keplr_config_chain_id
      chain_uid: $chains_keplr_config_chain_uid
    ) {
      bech32Config {
        bech32PrefixAccAddr
        bech32PrefixAccPub
        bech32PrefixConsAddr
        bech32PrefixConsPub
        bech32PrefixValAddr
        bech32PrefixValPub
      }
      bip44 {
        coinType
      }
      chainID
      chainName
      coinType
      currencies {
        coinDecimals
        coinDenom
        coinGeckoID
        coinMinimalDenom
      }
      explorer_url
      features
      feeCurrencies {
        coinDecimals
        coinDenom
        coinGeckoID
        coinMinimalDenom
        gasPriceStep {
          average
          high
          low
        }
      }
      gasPriceStep {
        average
        high
        low
      }
      rest
      rpc
      stakeCurrency {
        coinDecimals
        coinDenom
        coinGeckoID
        coinMinimalDenom
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedChainsKeplrConfigQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedChainsKeplrConfigQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedChainsKeplrConfigQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedChainsKeplrConfigQuery({
 *   variables: {
 *      chains_keplr_config_chain_id: // value for 'chains_keplr_config_chain_id'
 *      chains_keplr_config_chain_uid: // value for 'chains_keplr_config_chain_uid'
 *   },
 * });
 */
function useCodegenGeneratedChainsKeplrConfigQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedChainsKeplrConfigDocument, options);
}
function useCodegenGeneratedChainsKeplrConfigLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedChainsKeplrConfigDocument, options);
}
function refetchCodegenGeneratedChainsKeplrConfigQuery(variables) {
    return { query: exports.CodegenGeneratedChainsKeplrConfigDocument, variables: variables };
}
exports.CodegenGeneratedChainsRouterConfigDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_CHAINS_ROUTER_CONFIG {
  chains {
    router_config {
      chain_uid
      contract_address
      explorer_url
      logo
      type
    }
  }
}
    `;
/**
 * __useCodegenGeneratedChainsRouterConfigQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedChainsRouterConfigQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedChainsRouterConfigQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedChainsRouterConfigQuery({
 *   variables: {
 *   },
 * });
 */
function useCodegenGeneratedChainsRouterConfigQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedChainsRouterConfigDocument, options);
}
function useCodegenGeneratedChainsRouterConfigLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedChainsRouterConfigDocument, options);
}
function refetchCodegenGeneratedChainsRouterConfigQuery(variables) {
    return { query: exports.CodegenGeneratedChainsRouterConfigDocument, variables: variables };
}
exports.CodegenGeneratedChainsDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_CHAINS {
  chains {
    all_evm_chains {
      chain_id
      chain_uid
      explorer_url
      name
      native_currency {
        decimals
        name
        symbol
      }
      rpc_urls {
        default {
          http
        }
      }
    }
    router_config {
      chain_uid
      contract_address
      explorer_url
      logo
      type
    }
  }
}
    `;
/**
 * __useCodegenGeneratedChainsQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedChainsQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedChainsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedChainsQuery({
 *   variables: {
 *   },
 * });
 */
function useCodegenGeneratedChainsQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedChainsDocument, options);
}
function useCodegenGeneratedChainsLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedChainsDocument, options);
}
function refetchCodegenGeneratedChainsQuery(variables) {
    return { query: exports.CodegenGeneratedChainsDocument, variables: variables };
}
exports.CodegenGeneratedCwBalanceDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_CW_BALANCE($chain_uid: String!, $contract: String!, $cw_balance_address: String!) {
  cw(chain_uid: $chain_uid, contract: $contract) {
    balance(address: $cw_balance_address) {
      balance
    }
  }
}
    `;
/**
 * __useCodegenGeneratedCwBalanceQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedCwBalanceQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedCwBalanceQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedCwBalanceQuery({
 *   variables: {
 *      chain_uid: // value for 'chain_uid'
 *      contract: // value for 'contract'
 *      cw_balance_address: // value for 'cw_balance_address'
 *   },
 * });
 */
function useCodegenGeneratedCwBalanceQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedCwBalanceDocument, options);
}
function useCodegenGeneratedCwBalanceLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedCwBalanceDocument, options);
}
function refetchCodegenGeneratedCwBalanceQuery(variables) {
    return { query: exports.CodegenGeneratedCwBalanceDocument, variables: variables };
}
exports.CodegenGeneratedCwTokenInfoDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_CW_TOKEN_INFO($chain_uid: String!, $contract: String!) {
  cw(chain_uid: $chain_uid, contract: $contract) {
    token_info {
      decimals
      name
      symbol
      total_supply
    }
  }
}
    `;
/**
 * __useCodegenGeneratedCwTokenInfoQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedCwTokenInfoQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedCwTokenInfoQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedCwTokenInfoQuery({
 *   variables: {
 *      chain_uid: // value for 'chain_uid'
 *      contract: // value for 'contract'
 *   },
 * });
 */
function useCodegenGeneratedCwTokenInfoQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedCwTokenInfoDocument, options);
}
function useCodegenGeneratedCwTokenInfoLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedCwTokenInfoDocument, options);
}
function refetchCodegenGeneratedCwTokenInfoQuery(variables) {
    return { query: exports.CodegenGeneratedCwTokenInfoDocument, variables: variables };
}
exports.CodegenGeneratedCwDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_CW($chain_uid: String!, $contract: String!) {
  cw(chain_uid: $chain_uid, contract: $contract) {
    token_info {
      decimals
      name
      symbol
      total_supply
    }
  }
}
    `;
/**
 * __useCodegenGeneratedCwQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedCwQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedCwQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedCwQuery({
 *   variables: {
 *      chain_uid: // value for 'chain_uid'
 *      contract: // value for 'contract'
 *   },
 * });
 */
function useCodegenGeneratedCwQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedCwDocument, options);
}
function useCodegenGeneratedCwLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedCwDocument, options);
}
function refetchCodegenGeneratedCwQuery(variables) {
    return { query: exports.CodegenGeneratedCwDocument, variables: variables };
}
exports.CodegenGeneratedCwMulticallRawQueriesResultsDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_CW_MULTICALL_RAW_QUERIES_RESULTS($chain_uid: String!, $cw_multicall_raw_queries_queries: [RawQueryInput!]!) {
  cw_multicall(chain_uid: $chain_uid) {
    raw_queries(queries: $cw_multicall_raw_queries_queries) {
      results {
        error
        success
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedCwMulticallRawQueriesResultsQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedCwMulticallRawQueriesResultsQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedCwMulticallRawQueriesResultsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedCwMulticallRawQueriesResultsQuery({
 *   variables: {
 *      chain_uid: // value for 'chain_uid'
 *      cw_multicall_raw_queries_queries: // value for 'cw_multicall_raw_queries_queries'
 *   },
 * });
 */
function useCodegenGeneratedCwMulticallRawQueriesResultsQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedCwMulticallRawQueriesResultsDocument, options);
}
function useCodegenGeneratedCwMulticallRawQueriesResultsLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedCwMulticallRawQueriesResultsDocument, options);
}
function refetchCodegenGeneratedCwMulticallRawQueriesResultsQuery(variables) {
    return { query: exports.CodegenGeneratedCwMulticallRawQueriesResultsDocument, variables: variables };
}
exports.CodegenGeneratedCwMulticallRawQueriesDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_CW_MULTICALL_RAW_QUERIES($chain_uid: String!, $cw_multicall_raw_queries_queries: [RawQueryInput!]!) {
  cw_multicall(chain_uid: $chain_uid) {
    raw_queries(queries: $cw_multicall_raw_queries_queries) {
      results {
        error
        success
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedCwMulticallRawQueriesQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedCwMulticallRawQueriesQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedCwMulticallRawQueriesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedCwMulticallRawQueriesQuery({
 *   variables: {
 *      chain_uid: // value for 'chain_uid'
 *      cw_multicall_raw_queries_queries: // value for 'cw_multicall_raw_queries_queries'
 *   },
 * });
 */
function useCodegenGeneratedCwMulticallRawQueriesQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedCwMulticallRawQueriesDocument, options);
}
function useCodegenGeneratedCwMulticallRawQueriesLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedCwMulticallRawQueriesDocument, options);
}
function refetchCodegenGeneratedCwMulticallRawQueriesQuery(variables) {
    return { query: exports.CodegenGeneratedCwMulticallRawQueriesDocument, variables: variables };
}
exports.CodegenGeneratedCwMulticallSmartQueriesResultsDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_CW_MULTICALL_SMART_QUERIES_RESULTS($chain_uid: String!, $cw_multicall_smart_queries_queries: [SmartQueryInput!]!) {
  cw_multicall(chain_uid: $chain_uid) {
    smart_queries(queries: $cw_multicall_smart_queries_queries) {
      results {
        error
        success
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedCwMulticallSmartQueriesResultsQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedCwMulticallSmartQueriesResultsQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedCwMulticallSmartQueriesResultsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedCwMulticallSmartQueriesResultsQuery({
 *   variables: {
 *      chain_uid: // value for 'chain_uid'
 *      cw_multicall_smart_queries_queries: // value for 'cw_multicall_smart_queries_queries'
 *   },
 * });
 */
function useCodegenGeneratedCwMulticallSmartQueriesResultsQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedCwMulticallSmartQueriesResultsDocument, options);
}
function useCodegenGeneratedCwMulticallSmartQueriesResultsLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedCwMulticallSmartQueriesResultsDocument, options);
}
function refetchCodegenGeneratedCwMulticallSmartQueriesResultsQuery(variables) {
    return { query: exports.CodegenGeneratedCwMulticallSmartQueriesResultsDocument, variables: variables };
}
exports.CodegenGeneratedCwMulticallSmartQueriesDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_CW_MULTICALL_SMART_QUERIES($chain_uid: String!, $cw_multicall_smart_queries_queries: [SmartQueryInput!]!) {
  cw_multicall(chain_uid: $chain_uid) {
    smart_queries(queries: $cw_multicall_smart_queries_queries) {
      results {
        error
        success
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedCwMulticallSmartQueriesQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedCwMulticallSmartQueriesQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedCwMulticallSmartQueriesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedCwMulticallSmartQueriesQuery({
 *   variables: {
 *      chain_uid: // value for 'chain_uid'
 *      cw_multicall_smart_queries_queries: // value for 'cw_multicall_smart_queries_queries'
 *   },
 * });
 */
function useCodegenGeneratedCwMulticallSmartQueriesQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedCwMulticallSmartQueriesDocument, options);
}
function useCodegenGeneratedCwMulticallSmartQueriesLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedCwMulticallSmartQueriesDocument, options);
}
function refetchCodegenGeneratedCwMulticallSmartQueriesQuery(variables) {
    return { query: exports.CodegenGeneratedCwMulticallSmartQueriesDocument, variables: variables };
}
exports.CodegenGeneratedFactoryAllPoolsPaginationDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_FACTORY_ALL_POOLS_PAGINATION($chain_uid: String!, $factory_all_pools_limit: Int, $factory_all_pools_offset: Int) {
  factory(chain_uid: $chain_uid) {
    all_pools(limit: $factory_all_pools_limit, offset: $factory_all_pools_offset) {
      pagination {
        limit
        offset
        total_count
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedFactoryAllPoolsPaginationQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedFactoryAllPoolsPaginationQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedFactoryAllPoolsPaginationQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedFactoryAllPoolsPaginationQuery({
 *   variables: {
 *      chain_uid: // value for 'chain_uid'
 *      factory_all_pools_limit: // value for 'factory_all_pools_limit'
 *      factory_all_pools_offset: // value for 'factory_all_pools_offset'
 *   },
 * });
 */
function useCodegenGeneratedFactoryAllPoolsPaginationQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedFactoryAllPoolsPaginationDocument, options);
}
function useCodegenGeneratedFactoryAllPoolsPaginationLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedFactoryAllPoolsPaginationDocument, options);
}
function refetchCodegenGeneratedFactoryAllPoolsPaginationQuery(variables) {
    return { query: exports.CodegenGeneratedFactoryAllPoolsPaginationDocument, variables: variables };
}
exports.CodegenGeneratedFactoryAllPoolsPoolsPairDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_FACTORY_ALL_POOLS_POOLS_PAIR($chain_uid: String!, $factory_all_pools_limit: Int, $factory_all_pools_offset: Int) {
  factory(chain_uid: $chain_uid) {
    all_pools(limit: $factory_all_pools_limit, offset: $factory_all_pools_offset) {
      pools {
        pair {
          token_1
          token_2
        }
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedFactoryAllPoolsPoolsPairQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedFactoryAllPoolsPoolsPairQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedFactoryAllPoolsPoolsPairQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedFactoryAllPoolsPoolsPairQuery({
 *   variables: {
 *      chain_uid: // value for 'chain_uid'
 *      factory_all_pools_limit: // value for 'factory_all_pools_limit'
 *      factory_all_pools_offset: // value for 'factory_all_pools_offset'
 *   },
 * });
 */
function useCodegenGeneratedFactoryAllPoolsPoolsPairQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedFactoryAllPoolsPoolsPairDocument, options);
}
function useCodegenGeneratedFactoryAllPoolsPoolsPairLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedFactoryAllPoolsPoolsPairDocument, options);
}
function refetchCodegenGeneratedFactoryAllPoolsPoolsPairQuery(variables) {
    return { query: exports.CodegenGeneratedFactoryAllPoolsPoolsPairDocument, variables: variables };
}
exports.CodegenGeneratedFactoryAllPoolsPoolsDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_FACTORY_ALL_POOLS_POOLS($chain_uid: String!, $factory_all_pools_limit: Int, $factory_all_pools_offset: Int) {
  factory(chain_uid: $chain_uid) {
    all_pools(limit: $factory_all_pools_limit, offset: $factory_all_pools_offset) {
      pools {
        pair {
          token_1
          token_2
        }
        vlp
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedFactoryAllPoolsPoolsQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedFactoryAllPoolsPoolsQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedFactoryAllPoolsPoolsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedFactoryAllPoolsPoolsQuery({
 *   variables: {
 *      chain_uid: // value for 'chain_uid'
 *      factory_all_pools_limit: // value for 'factory_all_pools_limit'
 *      factory_all_pools_offset: // value for 'factory_all_pools_offset'
 *   },
 * });
 */
function useCodegenGeneratedFactoryAllPoolsPoolsQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedFactoryAllPoolsPoolsDocument, options);
}
function useCodegenGeneratedFactoryAllPoolsPoolsLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedFactoryAllPoolsPoolsDocument, options);
}
function refetchCodegenGeneratedFactoryAllPoolsPoolsQuery(variables) {
    return { query: exports.CodegenGeneratedFactoryAllPoolsPoolsDocument, variables: variables };
}
exports.CodegenGeneratedFactoryAllPoolsDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_FACTORY_ALL_POOLS($chain_uid: String!, $factory_all_pools_limit: Int, $factory_all_pools_offset: Int) {
  factory(chain_uid: $chain_uid) {
    all_pools(limit: $factory_all_pools_limit, offset: $factory_all_pools_offset) {
      pagination {
        limit
        offset
        total_count
      }
      pools {
        pair {
          token_1
          token_2
        }
        vlp
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedFactoryAllPoolsQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedFactoryAllPoolsQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedFactoryAllPoolsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedFactoryAllPoolsQuery({
 *   variables: {
 *      chain_uid: // value for 'chain_uid'
 *      factory_all_pools_limit: // value for 'factory_all_pools_limit'
 *      factory_all_pools_offset: // value for 'factory_all_pools_offset'
 *   },
 * });
 */
function useCodegenGeneratedFactoryAllPoolsQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedFactoryAllPoolsDocument, options);
}
function useCodegenGeneratedFactoryAllPoolsLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedFactoryAllPoolsDocument, options);
}
function refetchCodegenGeneratedFactoryAllPoolsQuery(variables) {
    return { query: exports.CodegenGeneratedFactoryAllPoolsDocument, variables: variables };
}
exports.CodegenGeneratedFactoryAllTokensPaginationDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_FACTORY_ALL_TOKENS_PAGINATION($chain_uid: String!, $factory_all_tokens_limit: Int, $factory_all_tokens_offset: Int) {
  factory(chain_uid: $chain_uid) {
    all_tokens(limit: $factory_all_tokens_limit, offset: $factory_all_tokens_offset) {
      pagination {
        limit
        offset
        total_count
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedFactoryAllTokensPaginationQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedFactoryAllTokensPaginationQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedFactoryAllTokensPaginationQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedFactoryAllTokensPaginationQuery({
 *   variables: {
 *      chain_uid: // value for 'chain_uid'
 *      factory_all_tokens_limit: // value for 'factory_all_tokens_limit'
 *      factory_all_tokens_offset: // value for 'factory_all_tokens_offset'
 *   },
 * });
 */
function useCodegenGeneratedFactoryAllTokensPaginationQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedFactoryAllTokensPaginationDocument, options);
}
function useCodegenGeneratedFactoryAllTokensPaginationLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedFactoryAllTokensPaginationDocument, options);
}
function refetchCodegenGeneratedFactoryAllTokensPaginationQuery(variables) {
    return { query: exports.CodegenGeneratedFactoryAllTokensPaginationDocument, variables: variables };
}
exports.CodegenGeneratedFactoryAllTokensDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_FACTORY_ALL_TOKENS($chain_uid: String!, $factory_all_tokens_limit: Int, $factory_all_tokens_offset: Int) {
  factory(chain_uid: $chain_uid) {
    all_tokens(limit: $factory_all_tokens_limit, offset: $factory_all_tokens_offset) {
      pagination {
        limit
        offset
        total_count
      }
      tokens
    }
  }
}
    `;
/**
 * __useCodegenGeneratedFactoryAllTokensQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedFactoryAllTokensQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedFactoryAllTokensQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedFactoryAllTokensQuery({
 *   variables: {
 *      chain_uid: // value for 'chain_uid'
 *      factory_all_tokens_limit: // value for 'factory_all_tokens_limit'
 *      factory_all_tokens_offset: // value for 'factory_all_tokens_offset'
 *   },
 * });
 */
function useCodegenGeneratedFactoryAllTokensQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedFactoryAllTokensDocument, options);
}
function useCodegenGeneratedFactoryAllTokensLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedFactoryAllTokensDocument, options);
}
function refetchCodegenGeneratedFactoryAllTokensQuery(variables) {
    return { query: exports.CodegenGeneratedFactoryAllTokensDocument, variables: variables };
}
exports.CodegenGeneratedFactoryAllowedDenomsDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_FACTORY_ALLOWED_DENOMS($chain_uid: String!, $factory_allowed_denoms_token_id: String) {
  factory(chain_uid: $chain_uid) {
    allowed_denoms(token_id: $factory_allowed_denoms_token_id) {
      ... on NativeTokenType {
        native {
          denom
        }
      }
      ... on SmartTokenType {
        smart {
          contract_address
        }
      }
      ... on VoucherTokenType {
        voucher
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedFactoryAllowedDenomsQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedFactoryAllowedDenomsQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedFactoryAllowedDenomsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedFactoryAllowedDenomsQuery({
 *   variables: {
 *      chain_uid: // value for 'chain_uid'
 *      factory_allowed_denoms_token_id: // value for 'factory_allowed_denoms_token_id'
 *   },
 * });
 */
function useCodegenGeneratedFactoryAllowedDenomsQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedFactoryAllowedDenomsDocument, options);
}
function useCodegenGeneratedFactoryAllowedDenomsLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedFactoryAllowedDenomsDocument, options);
}
function refetchCodegenGeneratedFactoryAllowedDenomsQuery(variables) {
    return { query: exports.CodegenGeneratedFactoryAllowedDenomsDocument, variables: variables };
}
exports.CodegenGeneratedFactoryEscrowDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_FACTORY_ESCROW($chain_uid: String!, $factory_escrow_token_id: String) {
  factory(chain_uid: $chain_uid) {
    escrow(token_id: $factory_escrow_token_id) {
      denoms {
        ... on NativeTokenType {
          native {
            denom
          }
        }
        ... on SmartTokenType {
          smart {
            contract_address
          }
        }
        ... on VoucherTokenType {
          voucher
        }
      }
      escrow_address
    }
  }
}
    `;
/**
 * __useCodegenGeneratedFactoryEscrowQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedFactoryEscrowQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedFactoryEscrowQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedFactoryEscrowQuery({
 *   variables: {
 *      chain_uid: // value for 'chain_uid'
 *      factory_escrow_token_id: // value for 'factory_escrow_token_id'
 *   },
 * });
 */
function useCodegenGeneratedFactoryEscrowQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedFactoryEscrowDocument, options);
}
function useCodegenGeneratedFactoryEscrowLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedFactoryEscrowDocument, options);
}
function refetchCodegenGeneratedFactoryEscrowQuery(variables) {
    return { query: exports.CodegenGeneratedFactoryEscrowDocument, variables: variables };
}
exports.CodegenGeneratedFactoryGetLptokenAddressDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_FACTORY_GET_LPTOKEN_ADDRESS($chain_uid: String!, $factory_get_LpToken_address_vlp_address: String!) {
  factory(chain_uid: $chain_uid) {
    get_LpToken_address(vlp_address: $factory_get_LpToken_address_vlp_address) {
      token_address
    }
  }
}
    `;
/**
 * __useCodegenGeneratedFactoryGetLptokenAddressQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedFactoryGetLptokenAddressQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedFactoryGetLptokenAddressQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedFactoryGetLptokenAddressQuery({
 *   variables: {
 *      chain_uid: // value for 'chain_uid'
 *      factory_get_LpToken_address_vlp_address: // value for 'factory_get_LpToken_address_vlp_address'
 *   },
 * });
 */
function useCodegenGeneratedFactoryGetLptokenAddressQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedFactoryGetLptokenAddressDocument, options);
}
function useCodegenGeneratedFactoryGetLptokenAddressLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedFactoryGetLptokenAddressDocument, options);
}
function refetchCodegenGeneratedFactoryGetLptokenAddressQuery(variables) {
    return { query: exports.CodegenGeneratedFactoryGetLptokenAddressDocument, variables: variables };
}
exports.CodegenGeneratedFactoryPartnerFeesCollectedTotalTotalsDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_FACTORY_PARTNER_FEES_COLLECTED_TOTAL_TOTALS($chain_uid: String!) {
  factory(chain_uid: $chain_uid) {
    partner_fees_collected {
      total {
        totals {
          amount
          denom
        }
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedFactoryPartnerFeesCollectedTotalTotalsQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedFactoryPartnerFeesCollectedTotalTotalsQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedFactoryPartnerFeesCollectedTotalTotalsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedFactoryPartnerFeesCollectedTotalTotalsQuery({
 *   variables: {
 *      chain_uid: // value for 'chain_uid'
 *   },
 * });
 */
function useCodegenGeneratedFactoryPartnerFeesCollectedTotalTotalsQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedFactoryPartnerFeesCollectedTotalTotalsDocument, options);
}
function useCodegenGeneratedFactoryPartnerFeesCollectedTotalTotalsLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedFactoryPartnerFeesCollectedTotalTotalsDocument, options);
}
function refetchCodegenGeneratedFactoryPartnerFeesCollectedTotalTotalsQuery(variables) {
    return { query: exports.CodegenGeneratedFactoryPartnerFeesCollectedTotalTotalsDocument, variables: variables };
}
exports.CodegenGeneratedFactoryPartnerFeesCollectedTotalDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_FACTORY_PARTNER_FEES_COLLECTED_TOTAL($chain_uid: String!) {
  factory(chain_uid: $chain_uid) {
    partner_fees_collected {
      total {
        totals {
          amount
          denom
        }
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedFactoryPartnerFeesCollectedTotalQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedFactoryPartnerFeesCollectedTotalQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedFactoryPartnerFeesCollectedTotalQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedFactoryPartnerFeesCollectedTotalQuery({
 *   variables: {
 *      chain_uid: // value for 'chain_uid'
 *   },
 * });
 */
function useCodegenGeneratedFactoryPartnerFeesCollectedTotalQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedFactoryPartnerFeesCollectedTotalDocument, options);
}
function useCodegenGeneratedFactoryPartnerFeesCollectedTotalLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedFactoryPartnerFeesCollectedTotalDocument, options);
}
function refetchCodegenGeneratedFactoryPartnerFeesCollectedTotalQuery(variables) {
    return { query: exports.CodegenGeneratedFactoryPartnerFeesCollectedTotalDocument, variables: variables };
}
exports.CodegenGeneratedFactoryPartnerFeesCollectedDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_FACTORY_PARTNER_FEES_COLLECTED($chain_uid: String!) {
  factory(chain_uid: $chain_uid) {
    partner_fees_collected {
      total {
        totals {
          amount
          denom
        }
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedFactoryPartnerFeesCollectedQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedFactoryPartnerFeesCollectedQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedFactoryPartnerFeesCollectedQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedFactoryPartnerFeesCollectedQuery({
 *   variables: {
 *      chain_uid: // value for 'chain_uid'
 *   },
 * });
 */
function useCodegenGeneratedFactoryPartnerFeesCollectedQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedFactoryPartnerFeesCollectedDocument, options);
}
function useCodegenGeneratedFactoryPartnerFeesCollectedLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedFactoryPartnerFeesCollectedDocument, options);
}
function refetchCodegenGeneratedFactoryPartnerFeesCollectedQuery(variables) {
    return { query: exports.CodegenGeneratedFactoryPartnerFeesCollectedDocument, variables: variables };
}
exports.CodegenGeneratedFactoryStateDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_FACTORY_STATE($chain_uid: String!) {
  factory(chain_uid: $chain_uid) {
    state {
      admin
      chain_uid
      hub_channel
      router_contract
    }
  }
}
    `;
/**
 * __useCodegenGeneratedFactoryStateQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedFactoryStateQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedFactoryStateQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedFactoryStateQuery({
 *   variables: {
 *      chain_uid: // value for 'chain_uid'
 *   },
 * });
 */
function useCodegenGeneratedFactoryStateQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedFactoryStateDocument, options);
}
function useCodegenGeneratedFactoryStateLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedFactoryStateDocument, options);
}
function refetchCodegenGeneratedFactoryStateQuery(variables) {
    return { query: exports.CodegenGeneratedFactoryStateDocument, variables: variables };
}
exports.CodegenGeneratedFactoryVlpDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_FACTORY_VLP($chain_uid: String!, $factory_vlp_pair: PairInput) {
  factory(chain_uid: $chain_uid) {
    vlp(pair: $factory_vlp_pair)
  }
}
    `;
/**
 * __useCodegenGeneratedFactoryVlpQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedFactoryVlpQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedFactoryVlpQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedFactoryVlpQuery({
 *   variables: {
 *      chain_uid: // value for 'chain_uid'
 *      factory_vlp_pair: // value for 'factory_vlp_pair'
 *   },
 * });
 */
function useCodegenGeneratedFactoryVlpQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedFactoryVlpDocument, options);
}
function useCodegenGeneratedFactoryVlpLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedFactoryVlpDocument, options);
}
function refetchCodegenGeneratedFactoryVlpQuery(variables) {
    return { query: exports.CodegenGeneratedFactoryVlpDocument, variables: variables };
}
exports.CodegenGeneratedFactoryDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_FACTORY($chain_uid: String!) {
  factory(chain_uid: $chain_uid) {
    partner_fees_collected {
      total {
        totals {
          amount
          denom
        }
      }
    }
    state {
      admin
      chain_uid
      hub_channel
      router_contract
    }
  }
}
    `;
/**
 * __useCodegenGeneratedFactoryQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedFactoryQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedFactoryQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedFactoryQuery({
 *   variables: {
 *      chain_uid: // value for 'chain_uid'
 *   },
 * });
 */
function useCodegenGeneratedFactoryQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedFactoryDocument, options);
}
function useCodegenGeneratedFactoryLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedFactoryDocument, options);
}
function refetchCodegenGeneratedFactoryQuery(variables) {
    return { query: exports.CodegenGeneratedFactoryDocument, variables: variables };
}
exports.CodegenGeneratedPoolFeesCollectedBreakdownDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_POOL_FEES_COLLECTED_BREAKDOWN {
  pool {
    fees_collected {
      breakdown {
        token1
        token2
        total_fee
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedPoolFeesCollectedBreakdownQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedPoolFeesCollectedBreakdownQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedPoolFeesCollectedBreakdownQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedPoolFeesCollectedBreakdownQuery({
 *   variables: {
 *   },
 * });
 */
function useCodegenGeneratedPoolFeesCollectedBreakdownQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedPoolFeesCollectedBreakdownDocument, options);
}
function useCodegenGeneratedPoolFeesCollectedBreakdownLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedPoolFeesCollectedBreakdownDocument, options);
}
function refetchCodegenGeneratedPoolFeesCollectedBreakdownQuery(variables) {
    return { query: exports.CodegenGeneratedPoolFeesCollectedBreakdownDocument, variables: variables };
}
exports.CodegenGeneratedPoolFeesCollectedDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_POOL_FEES_COLLECTED {
  pool {
    fees_collected {
      breakdown {
        token1
        token2
        total_fee
      }
      total_overall
    }
  }
}
    `;
/**
 * __useCodegenGeneratedPoolFeesCollectedQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedPoolFeesCollectedQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedPoolFeesCollectedQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedPoolFeesCollectedQuery({
 *   variables: {
 *   },
 * });
 */
function useCodegenGeneratedPoolFeesCollectedQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedPoolFeesCollectedDocument, options);
}
function useCodegenGeneratedPoolFeesCollectedLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedPoolFeesCollectedDocument, options);
}
function refetchCodegenGeneratedPoolFeesCollectedQuery(variables) {
    return { query: exports.CodegenGeneratedPoolFeesCollectedDocument, variables: variables };
}
exports.CodegenGeneratedPoolMyPoolsPairDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_POOL_MY_POOLS_PAIR($pool_my_pools_chain_uid: String, $pool_my_pools_user_address: String!) {
  pool {
    my_pools(
      chain_uid: $pool_my_pools_chain_uid
      user_address: $pool_my_pools_user_address
    ) {
      pair {
        token_1
        token_2
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedPoolMyPoolsPairQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedPoolMyPoolsPairQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedPoolMyPoolsPairQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedPoolMyPoolsPairQuery({
 *   variables: {
 *      pool_my_pools_chain_uid: // value for 'pool_my_pools_chain_uid'
 *      pool_my_pools_user_address: // value for 'pool_my_pools_user_address'
 *   },
 * });
 */
function useCodegenGeneratedPoolMyPoolsPairQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedPoolMyPoolsPairDocument, options);
}
function useCodegenGeneratedPoolMyPoolsPairLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedPoolMyPoolsPairDocument, options);
}
function refetchCodegenGeneratedPoolMyPoolsPairQuery(variables) {
    return { query: exports.CodegenGeneratedPoolMyPoolsPairDocument, variables: variables };
}
exports.CodegenGeneratedPoolMyPoolsUserDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_POOL_MY_POOLS_USER($pool_my_pools_chain_uid: String, $pool_my_pools_user_address: String!) {
  pool {
    my_pools(
      chain_uid: $pool_my_pools_chain_uid
      user_address: $pool_my_pools_user_address
    ) {
      user {
        address
        amount
        chain_uid
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedPoolMyPoolsUserQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedPoolMyPoolsUserQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedPoolMyPoolsUserQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedPoolMyPoolsUserQuery({
 *   variables: {
 *      pool_my_pools_chain_uid: // value for 'pool_my_pools_chain_uid'
 *      pool_my_pools_user_address: // value for 'pool_my_pools_user_address'
 *   },
 * });
 */
function useCodegenGeneratedPoolMyPoolsUserQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedPoolMyPoolsUserDocument, options);
}
function useCodegenGeneratedPoolMyPoolsUserLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedPoolMyPoolsUserDocument, options);
}
function refetchCodegenGeneratedPoolMyPoolsUserQuery(variables) {
    return { query: exports.CodegenGeneratedPoolMyPoolsUserDocument, variables: variables };
}
exports.CodegenGeneratedPoolMyPoolsDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_POOL_MY_POOLS($pool_my_pools_chain_uid: String, $pool_my_pools_user_address: String!) {
  pool {
    my_pools(
      chain_uid: $pool_my_pools_chain_uid
      user_address: $pool_my_pools_user_address
    ) {
      height
      pair {
        token_1
        token_2
      }
      user {
        address
        amount
        chain_uid
      }
      vlp
    }
  }
}
    `;
/**
 * __useCodegenGeneratedPoolMyPoolsQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedPoolMyPoolsQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedPoolMyPoolsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedPoolMyPoolsQuery({
 *   variables: {
 *      pool_my_pools_chain_uid: // value for 'pool_my_pools_chain_uid'
 *      pool_my_pools_user_address: // value for 'pool_my_pools_user_address'
 *   },
 * });
 */
function useCodegenGeneratedPoolMyPoolsQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedPoolMyPoolsDocument, options);
}
function useCodegenGeneratedPoolMyPoolsLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedPoolMyPoolsDocument, options);
}
function refetchCodegenGeneratedPoolMyPoolsQuery(variables) {
    return { query: exports.CodegenGeneratedPoolMyPoolsDocument, variables: variables };
}
exports.CodegenGeneratedPoolTokenPairWithLiquidityPaginationDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_POOL_TOKEN_PAIR_WITH_LIQUIDITY_PAGINATION($pool_token_pair_with_liquidity_limit: Int, $pool_token_pair_with_liquidity_offset: Int, $pool_token_pair_with_liquidity_only_show_verified: Boolean, $pool_token_pair_with_liquidity_sort_by: TokenPairSortBy, $pool_token_pair_with_liquidity_sort_order: SortOrder, $pool_token_pair_with_liquidity_token: String) {
  pool {
    token_pair_with_liquidity(
      limit: $pool_token_pair_with_liquidity_limit
      offset: $pool_token_pair_with_liquidity_offset
      only_show_verified: $pool_token_pair_with_liquidity_only_show_verified
      sort_by: $pool_token_pair_with_liquidity_sort_by
      sort_order: $pool_token_pair_with_liquidity_sort_order
      token: $pool_token_pair_with_liquidity_token
    ) {
      pagination {
        limit
        offset
        total_count
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedPoolTokenPairWithLiquidityPaginationQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedPoolTokenPairWithLiquidityPaginationQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedPoolTokenPairWithLiquidityPaginationQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedPoolTokenPairWithLiquidityPaginationQuery({
 *   variables: {
 *      pool_token_pair_with_liquidity_limit: // value for 'pool_token_pair_with_liquidity_limit'
 *      pool_token_pair_with_liquidity_offset: // value for 'pool_token_pair_with_liquidity_offset'
 *      pool_token_pair_with_liquidity_only_show_verified: // value for 'pool_token_pair_with_liquidity_only_show_verified'
 *      pool_token_pair_with_liquidity_sort_by: // value for 'pool_token_pair_with_liquidity_sort_by'
 *      pool_token_pair_with_liquidity_sort_order: // value for 'pool_token_pair_with_liquidity_sort_order'
 *      pool_token_pair_with_liquidity_token: // value for 'pool_token_pair_with_liquidity_token'
 *   },
 * });
 */
function useCodegenGeneratedPoolTokenPairWithLiquidityPaginationQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedPoolTokenPairWithLiquidityPaginationDocument, options);
}
function useCodegenGeneratedPoolTokenPairWithLiquidityPaginationLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedPoolTokenPairWithLiquidityPaginationDocument, options);
}
function refetchCodegenGeneratedPoolTokenPairWithLiquidityPaginationQuery(variables) {
    return { query: exports.CodegenGeneratedPoolTokenPairWithLiquidityPaginationDocument, variables: variables };
}
exports.CodegenGeneratedPoolTokenPairWithLiquidityResultsPairDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_POOL_TOKEN_PAIR_WITH_LIQUIDITY_RESULTS_PAIR($pool_token_pair_with_liquidity_limit: Int, $pool_token_pair_with_liquidity_offset: Int, $pool_token_pair_with_liquidity_only_show_verified: Boolean, $pool_token_pair_with_liquidity_sort_by: TokenPairSortBy, $pool_token_pair_with_liquidity_sort_order: SortOrder, $pool_token_pair_with_liquidity_token: String) {
  pool {
    token_pair_with_liquidity(
      limit: $pool_token_pair_with_liquidity_limit
      offset: $pool_token_pair_with_liquidity_offset
      only_show_verified: $pool_token_pair_with_liquidity_only_show_verified
      sort_by: $pool_token_pair_with_liquidity_sort_by
      sort_order: $pool_token_pair_with_liquidity_sort_order
      token: $pool_token_pair_with_liquidity_token
    ) {
      results {
        pair {
          token_1
          token_2
        }
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedPoolTokenPairWithLiquidityResultsPairQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedPoolTokenPairWithLiquidityResultsPairQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedPoolTokenPairWithLiquidityResultsPairQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedPoolTokenPairWithLiquidityResultsPairQuery({
 *   variables: {
 *      pool_token_pair_with_liquidity_limit: // value for 'pool_token_pair_with_liquidity_limit'
 *      pool_token_pair_with_liquidity_offset: // value for 'pool_token_pair_with_liquidity_offset'
 *      pool_token_pair_with_liquidity_only_show_verified: // value for 'pool_token_pair_with_liquidity_only_show_verified'
 *      pool_token_pair_with_liquidity_sort_by: // value for 'pool_token_pair_with_liquidity_sort_by'
 *      pool_token_pair_with_liquidity_sort_order: // value for 'pool_token_pair_with_liquidity_sort_order'
 *      pool_token_pair_with_liquidity_token: // value for 'pool_token_pair_with_liquidity_token'
 *   },
 * });
 */
function useCodegenGeneratedPoolTokenPairWithLiquidityResultsPairQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedPoolTokenPairWithLiquidityResultsPairDocument, options);
}
function useCodegenGeneratedPoolTokenPairWithLiquidityResultsPairLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedPoolTokenPairWithLiquidityResultsPairDocument, options);
}
function refetchCodegenGeneratedPoolTokenPairWithLiquidityResultsPairQuery(variables) {
    return { query: exports.CodegenGeneratedPoolTokenPairWithLiquidityResultsPairDocument, variables: variables };
}
exports.CodegenGeneratedPoolTokenPairWithLiquidityResultsDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_POOL_TOKEN_PAIR_WITH_LIQUIDITY_RESULTS($pool_token_pair_with_liquidity_limit: Int, $pool_token_pair_with_liquidity_offset: Int, $pool_token_pair_with_liquidity_only_show_verified: Boolean, $pool_token_pair_with_liquidity_sort_by: TokenPairSortBy, $pool_token_pair_with_liquidity_sort_order: SortOrder, $pool_token_pair_with_liquidity_token: String) {
  pool {
    token_pair_with_liquidity(
      limit: $pool_token_pair_with_liquidity_limit
      offset: $pool_token_pair_with_liquidity_offset
      only_show_verified: $pool_token_pair_with_liquidity_only_show_verified
      sort_by: $pool_token_pair_with_liquidity_sort_by
      sort_order: $pool_token_pair_with_liquidity_sort_order
      token: $pool_token_pair_with_liquidity_token
    ) {
      results {
        apr
        created_at
        pair {
          token_1
          token_2
        }
        tags
        total_liquidity
        vlp
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedPoolTokenPairWithLiquidityResultsQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedPoolTokenPairWithLiquidityResultsQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedPoolTokenPairWithLiquidityResultsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedPoolTokenPairWithLiquidityResultsQuery({
 *   variables: {
 *      pool_token_pair_with_liquidity_limit: // value for 'pool_token_pair_with_liquidity_limit'
 *      pool_token_pair_with_liquidity_offset: // value for 'pool_token_pair_with_liquidity_offset'
 *      pool_token_pair_with_liquidity_only_show_verified: // value for 'pool_token_pair_with_liquidity_only_show_verified'
 *      pool_token_pair_with_liquidity_sort_by: // value for 'pool_token_pair_with_liquidity_sort_by'
 *      pool_token_pair_with_liquidity_sort_order: // value for 'pool_token_pair_with_liquidity_sort_order'
 *      pool_token_pair_with_liquidity_token: // value for 'pool_token_pair_with_liquidity_token'
 *   },
 * });
 */
function useCodegenGeneratedPoolTokenPairWithLiquidityResultsQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedPoolTokenPairWithLiquidityResultsDocument, options);
}
function useCodegenGeneratedPoolTokenPairWithLiquidityResultsLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedPoolTokenPairWithLiquidityResultsDocument, options);
}
function refetchCodegenGeneratedPoolTokenPairWithLiquidityResultsQuery(variables) {
    return { query: exports.CodegenGeneratedPoolTokenPairWithLiquidityResultsDocument, variables: variables };
}
exports.CodegenGeneratedPoolTokenPairWithLiquidityDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_POOL_TOKEN_PAIR_WITH_LIQUIDITY($pool_token_pair_with_liquidity_limit: Int, $pool_token_pair_with_liquidity_offset: Int, $pool_token_pair_with_liquidity_only_show_verified: Boolean, $pool_token_pair_with_liquidity_sort_by: TokenPairSortBy, $pool_token_pair_with_liquidity_sort_order: SortOrder, $pool_token_pair_with_liquidity_token: String) {
  pool {
    token_pair_with_liquidity(
      limit: $pool_token_pair_with_liquidity_limit
      offset: $pool_token_pair_with_liquidity_offset
      only_show_verified: $pool_token_pair_with_liquidity_only_show_verified
      sort_by: $pool_token_pair_with_liquidity_sort_by
      sort_order: $pool_token_pair_with_liquidity_sort_order
      token: $pool_token_pair_with_liquidity_token
    ) {
      pagination {
        limit
        offset
        total_count
      }
      results {
        apr
        created_at
        pair {
          token_1
          token_2
        }
        tags
        total_liquidity
        vlp
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedPoolTokenPairWithLiquidityQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedPoolTokenPairWithLiquidityQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedPoolTokenPairWithLiquidityQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedPoolTokenPairWithLiquidityQuery({
 *   variables: {
 *      pool_token_pair_with_liquidity_limit: // value for 'pool_token_pair_with_liquidity_limit'
 *      pool_token_pair_with_liquidity_offset: // value for 'pool_token_pair_with_liquidity_offset'
 *      pool_token_pair_with_liquidity_only_show_verified: // value for 'pool_token_pair_with_liquidity_only_show_verified'
 *      pool_token_pair_with_liquidity_sort_by: // value for 'pool_token_pair_with_liquidity_sort_by'
 *      pool_token_pair_with_liquidity_sort_order: // value for 'pool_token_pair_with_liquidity_sort_order'
 *      pool_token_pair_with_liquidity_token: // value for 'pool_token_pair_with_liquidity_token'
 *   },
 * });
 */
function useCodegenGeneratedPoolTokenPairWithLiquidityQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedPoolTokenPairWithLiquidityDocument, options);
}
function useCodegenGeneratedPoolTokenPairWithLiquidityLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedPoolTokenPairWithLiquidityDocument, options);
}
function refetchCodegenGeneratedPoolTokenPairWithLiquidityQuery(variables) {
    return { query: exports.CodegenGeneratedPoolTokenPairWithLiquidityDocument, variables: variables };
}
exports.CodegenGeneratedPoolVolumeVolumeBreakdown_24HoursDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_POOL_VOLUME_VOLUME_BREAKDOWN_24HOURS {
  pool {
    volume {
      volume_breakdown_24hours {
        pair
        volume
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedPoolVolumeVolumeBreakdown_24HoursQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedPoolVolumeVolumeBreakdown_24HoursQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedPoolVolumeVolumeBreakdown_24HoursQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedPoolVolumeVolumeBreakdown_24HoursQuery({
 *   variables: {
 *   },
 * });
 */
function useCodegenGeneratedPoolVolumeVolumeBreakdown_24HoursQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedPoolVolumeVolumeBreakdown_24HoursDocument, options);
}
function useCodegenGeneratedPoolVolumeVolumeBreakdown_24HoursLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedPoolVolumeVolumeBreakdown_24HoursDocument, options);
}
function refetchCodegenGeneratedPoolVolumeVolumeBreakdown_24HoursQuery(variables) {
    return { query: exports.CodegenGeneratedPoolVolumeVolumeBreakdown_24HoursDocument, variables: variables };
}
exports.CodegenGeneratedPoolVolumeDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_POOL_VOLUME {
  pool {
    volume {
      total_liquidity
      total_volume
      volume_24hours
      volume_breakdown_24hours {
        pair
        volume
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedPoolVolumeQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedPoolVolumeQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedPoolVolumeQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedPoolVolumeQuery({
 *   variables: {
 *   },
 * });
 */
function useCodegenGeneratedPoolVolumeQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedPoolVolumeDocument, options);
}
function useCodegenGeneratedPoolVolumeLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedPoolVolumeDocument, options);
}
function refetchCodegenGeneratedPoolVolumeQuery(variables) {
    return { query: exports.CodegenGeneratedPoolVolumeDocument, variables: variables };
}
exports.CodegenGeneratedPoolDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_POOL {
  pool {
    fees_collected {
      breakdown {
        token1
        token2
        total_fee
      }
      total_overall
    }
    volume {
      total_liquidity
      total_volume
      volume_24hours
      volume_breakdown_24hours {
        pair
        volume
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedPoolQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedPoolQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedPoolQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedPoolQuery({
 *   variables: {
 *   },
 * });
 */
function useCodegenGeneratedPoolQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedPoolDocument, options);
}
function useCodegenGeneratedPoolLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedPoolDocument, options);
}
function refetchCodegenGeneratedPoolQuery(variables) {
    return { query: exports.CodegenGeneratedPoolDocument, variables: variables };
}
exports.CodegenGeneratedRouterAllChainsDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_ROUTER_ALL_CHAINS {
  router {
    all_chains {
      chain_id
      chain_uid
      factory_address
    }
  }
}
    `;
/**
 * __useCodegenGeneratedRouterAllChainsQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedRouterAllChainsQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedRouterAllChainsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedRouterAllChainsQuery({
 *   variables: {
 *   },
 * });
 */
function useCodegenGeneratedRouterAllChainsQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedRouterAllChainsDocument, options);
}
function useCodegenGeneratedRouterAllChainsLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedRouterAllChainsDocument, options);
}
function refetchCodegenGeneratedRouterAllChainsQuery(variables) {
    return { query: exports.CodegenGeneratedRouterAllChainsDocument, variables: variables };
}
exports.CodegenGeneratedRouterAllEscrowsDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_ROUTER_ALL_ESCROWS($router_all_escrows_limit: Int, $router_all_escrows_max: String, $router_all_escrows_min: String, $router_all_escrows_skip: Int) {
  router {
    all_escrows(
      limit: $router_all_escrows_limit
      max: $router_all_escrows_max
      min: $router_all_escrows_min
      skip: $router_all_escrows_skip
    ) {
      balance
      chain_uid
      token
    }
  }
}
    `;
/**
 * __useCodegenGeneratedRouterAllEscrowsQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedRouterAllEscrowsQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedRouterAllEscrowsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedRouterAllEscrowsQuery({
 *   variables: {
 *      router_all_escrows_limit: // value for 'router_all_escrows_limit'
 *      router_all_escrows_max: // value for 'router_all_escrows_max'
 *      router_all_escrows_min: // value for 'router_all_escrows_min'
 *      router_all_escrows_skip: // value for 'router_all_escrows_skip'
 *   },
 * });
 */
function useCodegenGeneratedRouterAllEscrowsQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedRouterAllEscrowsDocument, options);
}
function useCodegenGeneratedRouterAllEscrowsLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedRouterAllEscrowsDocument, options);
}
function refetchCodegenGeneratedRouterAllEscrowsQuery(variables) {
    return { query: exports.CodegenGeneratedRouterAllEscrowsDocument, variables: variables };
}
exports.CodegenGeneratedRouterAllTokensDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_ROUTER_ALL_TOKENS($router_all_tokens_limit: Int, $router_all_tokens_max: String, $router_all_tokens_min: String, $router_all_tokens_skip: Int) {
  router {
    all_tokens(
      limit: $router_all_tokens_limit
      max: $router_all_tokens_max
      min: $router_all_tokens_min
      skip: $router_all_tokens_skip
    ) {
      tokens
    }
  }
}
    `;
/**
 * __useCodegenGeneratedRouterAllTokensQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedRouterAllTokensQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedRouterAllTokensQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedRouterAllTokensQuery({
 *   variables: {
 *      router_all_tokens_limit: // value for 'router_all_tokens_limit'
 *      router_all_tokens_max: // value for 'router_all_tokens_max'
 *      router_all_tokens_min: // value for 'router_all_tokens_min'
 *      router_all_tokens_skip: // value for 'router_all_tokens_skip'
 *   },
 * });
 */
function useCodegenGeneratedRouterAllTokensQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedRouterAllTokensDocument, options);
}
function useCodegenGeneratedRouterAllTokensLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedRouterAllTokensDocument, options);
}
function refetchCodegenGeneratedRouterAllTokensQuery(variables) {
    return { query: exports.CodegenGeneratedRouterAllTokensDocument, variables: variables };
}
exports.CodegenGeneratedRouterAllVlpsVlpsDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_ROUTER_ALL_VLPS_VLPS($router_all_vlps_limit: Int, $router_all_vlps_max: [String], $router_all_vlps_min: [String], $router_all_vlps_skip: Int) {
  router {
    all_vlps(
      limit: $router_all_vlps_limit
      max: $router_all_vlps_max
      min: $router_all_vlps_min
      skip: $router_all_vlps_skip
    ) {
      vlps {
        token_1
        token_2
        vlp
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedRouterAllVlpsVlpsQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedRouterAllVlpsVlpsQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedRouterAllVlpsVlpsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedRouterAllVlpsVlpsQuery({
 *   variables: {
 *      router_all_vlps_limit: // value for 'router_all_vlps_limit'
 *      router_all_vlps_max: // value for 'router_all_vlps_max'
 *      router_all_vlps_min: // value for 'router_all_vlps_min'
 *      router_all_vlps_skip: // value for 'router_all_vlps_skip'
 *   },
 * });
 */
function useCodegenGeneratedRouterAllVlpsVlpsQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedRouterAllVlpsVlpsDocument, options);
}
function useCodegenGeneratedRouterAllVlpsVlpsLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedRouterAllVlpsVlpsDocument, options);
}
function refetchCodegenGeneratedRouterAllVlpsVlpsQuery(variables) {
    return { query: exports.CodegenGeneratedRouterAllVlpsVlpsDocument, variables: variables };
}
exports.CodegenGeneratedRouterAllVlpsDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_ROUTER_ALL_VLPS($router_all_vlps_limit: Int, $router_all_vlps_max: [String], $router_all_vlps_min: [String], $router_all_vlps_skip: Int) {
  router {
    all_vlps(
      limit: $router_all_vlps_limit
      max: $router_all_vlps_max
      min: $router_all_vlps_min
      skip: $router_all_vlps_skip
    ) {
      vlps {
        token_1
        token_2
        vlp
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedRouterAllVlpsQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedRouterAllVlpsQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedRouterAllVlpsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedRouterAllVlpsQuery({
 *   variables: {
 *      router_all_vlps_limit: // value for 'router_all_vlps_limit'
 *      router_all_vlps_max: // value for 'router_all_vlps_max'
 *      router_all_vlps_min: // value for 'router_all_vlps_min'
 *      router_all_vlps_skip: // value for 'router_all_vlps_skip'
 *   },
 * });
 */
function useCodegenGeneratedRouterAllVlpsQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedRouterAllVlpsDocument, options);
}
function useCodegenGeneratedRouterAllVlpsLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedRouterAllVlpsDocument, options);
}
function refetchCodegenGeneratedRouterAllVlpsQuery(variables) {
    return { query: exports.CodegenGeneratedRouterAllVlpsDocument, variables: variables };
}
exports.CodegenGeneratedRouterChainChainChainTypeIbcDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_ROUTER_CHAIN_CHAIN_CHAIN_TYPE_IBC($router_chain_chain_uid: String!) {
  router {
    chain(chain_uid: $router_chain_chain_uid) {
      chain {
        chain_type {
          ibc {
            from_factory_channel
            from_hub_channel
          }
        }
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedRouterChainChainChainTypeIbcQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedRouterChainChainChainTypeIbcQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedRouterChainChainChainTypeIbcQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedRouterChainChainChainTypeIbcQuery({
 *   variables: {
 *      router_chain_chain_uid: // value for 'router_chain_chain_uid'
 *   },
 * });
 */
function useCodegenGeneratedRouterChainChainChainTypeIbcQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedRouterChainChainChainTypeIbcDocument, options);
}
function useCodegenGeneratedRouterChainChainChainTypeIbcLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedRouterChainChainChainTypeIbcDocument, options);
}
function refetchCodegenGeneratedRouterChainChainChainTypeIbcQuery(variables) {
    return { query: exports.CodegenGeneratedRouterChainChainChainTypeIbcDocument, variables: variables };
}
exports.CodegenGeneratedRouterChainChainChainTypeDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_ROUTER_CHAIN_CHAIN_CHAIN_TYPE($router_chain_chain_uid: String!) {
  router {
    chain(chain_uid: $router_chain_chain_uid) {
      chain {
        chain_type {
          ibc {
            from_factory_channel
            from_hub_channel
          }
        }
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedRouterChainChainChainTypeQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedRouterChainChainChainTypeQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedRouterChainChainChainTypeQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedRouterChainChainChainTypeQuery({
 *   variables: {
 *      router_chain_chain_uid: // value for 'router_chain_chain_uid'
 *   },
 * });
 */
function useCodegenGeneratedRouterChainChainChainTypeQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedRouterChainChainChainTypeDocument, options);
}
function useCodegenGeneratedRouterChainChainChainTypeLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedRouterChainChainChainTypeDocument, options);
}
function refetchCodegenGeneratedRouterChainChainChainTypeQuery(variables) {
    return { query: exports.CodegenGeneratedRouterChainChainChainTypeDocument, variables: variables };
}
exports.CodegenGeneratedRouterChainChainDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_ROUTER_CHAIN_CHAIN($router_chain_chain_uid: String!) {
  router {
    chain(chain_uid: $router_chain_chain_uid) {
      chain {
        chain_type {
          ibc {
            from_factory_channel
            from_hub_channel
          }
        }
        factory
        factory_chain_id
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedRouterChainChainQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedRouterChainChainQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedRouterChainChainQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedRouterChainChainQuery({
 *   variables: {
 *      router_chain_chain_uid: // value for 'router_chain_chain_uid'
 *   },
 * });
 */
function useCodegenGeneratedRouterChainChainQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedRouterChainChainDocument, options);
}
function useCodegenGeneratedRouterChainChainLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedRouterChainChainDocument, options);
}
function refetchCodegenGeneratedRouterChainChainQuery(variables) {
    return { query: exports.CodegenGeneratedRouterChainChainDocument, variables: variables };
}
exports.CodegenGeneratedRouterChainDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_ROUTER_CHAIN($router_chain_chain_uid: String!) {
  router {
    chain(chain_uid: $router_chain_chain_uid) {
      chain {
        chain_type {
          ibc {
            from_factory_channel
            from_hub_channel
          }
        }
        factory
        factory_chain_id
      }
      chain_uid
    }
  }
}
    `;
/**
 * __useCodegenGeneratedRouterChainQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedRouterChainQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedRouterChainQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedRouterChainQuery({
 *   variables: {
 *      router_chain_chain_uid: // value for 'router_chain_chain_uid'
 *   },
 * });
 */
function useCodegenGeneratedRouterChainQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedRouterChainDocument, options);
}
function useCodegenGeneratedRouterChainLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedRouterChainDocument, options);
}
function refetchCodegenGeneratedRouterChainQuery(variables) {
    return { query: exports.CodegenGeneratedRouterChainDocument, variables: variables };
}
exports.CodegenGeneratedRouterEscrowsDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_ROUTER_ESCROWS($router_escrows_limit: Int, $router_escrows_max: String, $router_escrows_min: String, $router_escrows_skip: Int, $router_escrows_token: String!) {
  router {
    escrows(
      limit: $router_escrows_limit
      max: $router_escrows_max
      min: $router_escrows_min
      skip: $router_escrows_skip
      token: $router_escrows_token
    ) {
      balance
      chain_id
      chain_uid
    }
  }
}
    `;
/**
 * __useCodegenGeneratedRouterEscrowsQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedRouterEscrowsQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedRouterEscrowsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedRouterEscrowsQuery({
 *   variables: {
 *      router_escrows_limit: // value for 'router_escrows_limit'
 *      router_escrows_max: // value for 'router_escrows_max'
 *      router_escrows_min: // value for 'router_escrows_min'
 *      router_escrows_skip: // value for 'router_escrows_skip'
 *      router_escrows_token: // value for 'router_escrows_token'
 *   },
 * });
 */
function useCodegenGeneratedRouterEscrowsQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedRouterEscrowsDocument, options);
}
function useCodegenGeneratedRouterEscrowsLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedRouterEscrowsDocument, options);
}
function refetchCodegenGeneratedRouterEscrowsQuery(variables) {
    return { query: exports.CodegenGeneratedRouterEscrowsDocument, variables: variables };
}
exports.CodegenGeneratedRouterSimulateReleaseEscrowReleaseAmountsCrossChainUserUserDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_ROUTER_SIMULATE_RELEASE_ESCROW_RELEASE_AMOUNTS_CROSS_CHAIN_USER_USER($router_simulate_release_escrow_amount: Int, $router_simulate_release_escrow_cross_chain_addresses: [CrossChainUserWithLimitInput], $router_simulate_release_escrow_token: String!) {
  router {
    simulate_release_escrow(
      amount: $router_simulate_release_escrow_amount
      cross_chain_addresses: $router_simulate_release_escrow_cross_chain_addresses
      token: $router_simulate_release_escrow_token
    ) {
      release_amounts {
        cross_chain_user {
          user {
            address
            amount
            chain_uid
          }
        }
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedRouterSimulateReleaseEscrowReleaseAmountsCrossChainUserUserQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedRouterSimulateReleaseEscrowReleaseAmountsCrossChainUserUserQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedRouterSimulateReleaseEscrowReleaseAmountsCrossChainUserUserQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedRouterSimulateReleaseEscrowReleaseAmountsCrossChainUserUserQuery({
 *   variables: {
 *      router_simulate_release_escrow_amount: // value for 'router_simulate_release_escrow_amount'
 *      router_simulate_release_escrow_cross_chain_addresses: // value for 'router_simulate_release_escrow_cross_chain_addresses'
 *      router_simulate_release_escrow_token: // value for 'router_simulate_release_escrow_token'
 *   },
 * });
 */
function useCodegenGeneratedRouterSimulateReleaseEscrowReleaseAmountsCrossChainUserUserQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedRouterSimulateReleaseEscrowReleaseAmountsCrossChainUserUserDocument, options);
}
function useCodegenGeneratedRouterSimulateReleaseEscrowReleaseAmountsCrossChainUserUserLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedRouterSimulateReleaseEscrowReleaseAmountsCrossChainUserUserDocument, options);
}
function refetchCodegenGeneratedRouterSimulateReleaseEscrowReleaseAmountsCrossChainUserUserQuery(variables) {
    return { query: exports.CodegenGeneratedRouterSimulateReleaseEscrowReleaseAmountsCrossChainUserUserDocument, variables: variables };
}
exports.CodegenGeneratedRouterSimulateReleaseEscrowReleaseAmountsCrossChainUserDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_ROUTER_SIMULATE_RELEASE_ESCROW_RELEASE_AMOUNTS_CROSS_CHAIN_USER($router_simulate_release_escrow_amount: Int, $router_simulate_release_escrow_cross_chain_addresses: [CrossChainUserWithLimitInput], $router_simulate_release_escrow_token: String!) {
  router {
    simulate_release_escrow(
      amount: $router_simulate_release_escrow_amount
      cross_chain_addresses: $router_simulate_release_escrow_cross_chain_addresses
      token: $router_simulate_release_escrow_token
    ) {
      release_amounts {
        cross_chain_user {
          limit
          user {
            address
            amount
            chain_uid
          }
        }
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedRouterSimulateReleaseEscrowReleaseAmountsCrossChainUserQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedRouterSimulateReleaseEscrowReleaseAmountsCrossChainUserQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedRouterSimulateReleaseEscrowReleaseAmountsCrossChainUserQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedRouterSimulateReleaseEscrowReleaseAmountsCrossChainUserQuery({
 *   variables: {
 *      router_simulate_release_escrow_amount: // value for 'router_simulate_release_escrow_amount'
 *      router_simulate_release_escrow_cross_chain_addresses: // value for 'router_simulate_release_escrow_cross_chain_addresses'
 *      router_simulate_release_escrow_token: // value for 'router_simulate_release_escrow_token'
 *   },
 * });
 */
function useCodegenGeneratedRouterSimulateReleaseEscrowReleaseAmountsCrossChainUserQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedRouterSimulateReleaseEscrowReleaseAmountsCrossChainUserDocument, options);
}
function useCodegenGeneratedRouterSimulateReleaseEscrowReleaseAmountsCrossChainUserLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedRouterSimulateReleaseEscrowReleaseAmountsCrossChainUserDocument, options);
}
function refetchCodegenGeneratedRouterSimulateReleaseEscrowReleaseAmountsCrossChainUserQuery(variables) {
    return { query: exports.CodegenGeneratedRouterSimulateReleaseEscrowReleaseAmountsCrossChainUserDocument, variables: variables };
}
exports.CodegenGeneratedRouterSimulateReleaseEscrowReleaseAmountsDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_ROUTER_SIMULATE_RELEASE_ESCROW_RELEASE_AMOUNTS($router_simulate_release_escrow_amount: Int, $router_simulate_release_escrow_cross_chain_addresses: [CrossChainUserWithLimitInput], $router_simulate_release_escrow_token: String!) {
  router {
    simulate_release_escrow(
      amount: $router_simulate_release_escrow_amount
      cross_chain_addresses: $router_simulate_release_escrow_cross_chain_addresses
      token: $router_simulate_release_escrow_token
    ) {
      release_amounts {
        amount
        cross_chain_user {
          limit
          user {
            address
            amount
            chain_uid
          }
        }
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedRouterSimulateReleaseEscrowReleaseAmountsQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedRouterSimulateReleaseEscrowReleaseAmountsQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedRouterSimulateReleaseEscrowReleaseAmountsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedRouterSimulateReleaseEscrowReleaseAmountsQuery({
 *   variables: {
 *      router_simulate_release_escrow_amount: // value for 'router_simulate_release_escrow_amount'
 *      router_simulate_release_escrow_cross_chain_addresses: // value for 'router_simulate_release_escrow_cross_chain_addresses'
 *      router_simulate_release_escrow_token: // value for 'router_simulate_release_escrow_token'
 *   },
 * });
 */
function useCodegenGeneratedRouterSimulateReleaseEscrowReleaseAmountsQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedRouterSimulateReleaseEscrowReleaseAmountsDocument, options);
}
function useCodegenGeneratedRouterSimulateReleaseEscrowReleaseAmountsLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedRouterSimulateReleaseEscrowReleaseAmountsDocument, options);
}
function refetchCodegenGeneratedRouterSimulateReleaseEscrowReleaseAmountsQuery(variables) {
    return { query: exports.CodegenGeneratedRouterSimulateReleaseEscrowReleaseAmountsDocument, variables: variables };
}
exports.CodegenGeneratedRouterSimulateReleaseEscrowDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_ROUTER_SIMULATE_RELEASE_ESCROW($router_simulate_release_escrow_amount: Int, $router_simulate_release_escrow_cross_chain_addresses: [CrossChainUserWithLimitInput], $router_simulate_release_escrow_token: String!) {
  router {
    simulate_release_escrow(
      amount: $router_simulate_release_escrow_amount
      cross_chain_addresses: $router_simulate_release_escrow_cross_chain_addresses
      token: $router_simulate_release_escrow_token
    ) {
      release_amounts {
        amount
        cross_chain_user {
          limit
          user {
            address
            amount
            chain_uid
          }
        }
      }
      remaining_amount
    }
  }
}
    `;
/**
 * __useCodegenGeneratedRouterSimulateReleaseEscrowQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedRouterSimulateReleaseEscrowQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedRouterSimulateReleaseEscrowQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedRouterSimulateReleaseEscrowQuery({
 *   variables: {
 *      router_simulate_release_escrow_amount: // value for 'router_simulate_release_escrow_amount'
 *      router_simulate_release_escrow_cross_chain_addresses: // value for 'router_simulate_release_escrow_cross_chain_addresses'
 *      router_simulate_release_escrow_token: // value for 'router_simulate_release_escrow_token'
 *   },
 * });
 */
function useCodegenGeneratedRouterSimulateReleaseEscrowQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedRouterSimulateReleaseEscrowDocument, options);
}
function useCodegenGeneratedRouterSimulateReleaseEscrowLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedRouterSimulateReleaseEscrowDocument, options);
}
function refetchCodegenGeneratedRouterSimulateReleaseEscrowQuery(variables) {
    return { query: exports.CodegenGeneratedRouterSimulateReleaseEscrowDocument, variables: variables };
}
exports.CodegenGeneratedRouterSimulateSwapDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_ROUTER_SIMULATE_SWAP($router_simulate_swap_amount_in: String!, $router_simulate_swap_asset_in: String!, $router_simulate_swap_asset_out: String!, $router_simulate_swap_min_amount_out: String!, $router_simulate_swap_swaps: [String!]) {
  router {
    simulate_swap(
      amount_in: $router_simulate_swap_amount_in
      asset_in: $router_simulate_swap_asset_in
      asset_out: $router_simulate_swap_asset_out
      min_amount_out: $router_simulate_swap_min_amount_out
      swaps: $router_simulate_swap_swaps
    ) {
      amount_out
      asset_out
    }
  }
}
    `;
/**
 * __useCodegenGeneratedRouterSimulateSwapQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedRouterSimulateSwapQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedRouterSimulateSwapQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedRouterSimulateSwapQuery({
 *   variables: {
 *      router_simulate_swap_amount_in: // value for 'router_simulate_swap_amount_in'
 *      router_simulate_swap_asset_in: // value for 'router_simulate_swap_asset_in'
 *      router_simulate_swap_asset_out: // value for 'router_simulate_swap_asset_out'
 *      router_simulate_swap_min_amount_out: // value for 'router_simulate_swap_min_amount_out'
 *      router_simulate_swap_swaps: // value for 'router_simulate_swap_swaps'
 *   },
 * });
 */
function useCodegenGeneratedRouterSimulateSwapQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedRouterSimulateSwapDocument, options);
}
function useCodegenGeneratedRouterSimulateSwapLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedRouterSimulateSwapDocument, options);
}
function refetchCodegenGeneratedRouterSimulateSwapQuery(variables) {
    return { query: exports.CodegenGeneratedRouterSimulateSwapDocument, variables: variables };
}
exports.CodegenGeneratedRouterStateDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_ROUTER_STATE {
  router {
    state {
      admin
      virtual_balance_address
      vlp_code_id
    }
  }
}
    `;
/**
 * __useCodegenGeneratedRouterStateQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedRouterStateQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedRouterStateQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedRouterStateQuery({
 *   variables: {
 *   },
 * });
 */
function useCodegenGeneratedRouterStateQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedRouterStateDocument, options);
}
function useCodegenGeneratedRouterStateLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedRouterStateDocument, options);
}
function refetchCodegenGeneratedRouterStateQuery(variables) {
    return { query: exports.CodegenGeneratedRouterStateDocument, variables: variables };
}
exports.CodegenGeneratedRouterTokenDenomsDenomsDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_ROUTER_TOKEN_DENOMS_DENOMS($router_token_denoms_token: String!) {
  router {
    token_denoms(token: $router_token_denoms_token) {
      denoms {
        chain_uid
        token_type {
          ... on NativeTokenType {
            native {
              denom
            }
          }
          ... on SmartTokenType {
            smart {
              contract_address
            }
          }
          ... on VoucherTokenType {
            voucher
          }
        }
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedRouterTokenDenomsDenomsQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedRouterTokenDenomsDenomsQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedRouterTokenDenomsDenomsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedRouterTokenDenomsDenomsQuery({
 *   variables: {
 *      router_token_denoms_token: // value for 'router_token_denoms_token'
 *   },
 * });
 */
function useCodegenGeneratedRouterTokenDenomsDenomsQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedRouterTokenDenomsDenomsDocument, options);
}
function useCodegenGeneratedRouterTokenDenomsDenomsLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedRouterTokenDenomsDenomsDocument, options);
}
function refetchCodegenGeneratedRouterTokenDenomsDenomsQuery(variables) {
    return { query: exports.CodegenGeneratedRouterTokenDenomsDenomsDocument, variables: variables };
}
exports.CodegenGeneratedRouterTokenDenomsDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_ROUTER_TOKEN_DENOMS($router_token_denoms_token: String!) {
  router {
    token_denoms(token: $router_token_denoms_token) {
      denoms {
        chain_uid
        token_type {
          ... on NativeTokenType {
            native {
              denom
            }
          }
          ... on SmartTokenType {
            smart {
              contract_address
            }
          }
          ... on VoucherTokenType {
            voucher
          }
        }
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedRouterTokenDenomsQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedRouterTokenDenomsQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedRouterTokenDenomsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedRouterTokenDenomsQuery({
 *   variables: {
 *      router_token_denoms_token: // value for 'router_token_denoms_token'
 *   },
 * });
 */
function useCodegenGeneratedRouterTokenDenomsQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedRouterTokenDenomsDocument, options);
}
function useCodegenGeneratedRouterTokenDenomsLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedRouterTokenDenomsDocument, options);
}
function refetchCodegenGeneratedRouterTokenDenomsQuery(variables) {
    return { query: exports.CodegenGeneratedRouterTokenDenomsDocument, variables: variables };
}
exports.CodegenGeneratedRouterTokenPairsFromVlpDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_ROUTER_TOKEN_PAIRS_FROM_VLP($router_token_pairs_from_vlp_vlp: String!) {
  router {
    token_pairs_from_vlp(vlp: $router_token_pairs_from_vlp_vlp) {
      token_1
      token_2
      vlp
    }
  }
}
    `;
/**
 * __useCodegenGeneratedRouterTokenPairsFromVlpQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedRouterTokenPairsFromVlpQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedRouterTokenPairsFromVlpQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedRouterTokenPairsFromVlpQuery({
 *   variables: {
 *      router_token_pairs_from_vlp_vlp: // value for 'router_token_pairs_from_vlp_vlp'
 *   },
 * });
 */
function useCodegenGeneratedRouterTokenPairsFromVlpQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedRouterTokenPairsFromVlpDocument, options);
}
function useCodegenGeneratedRouterTokenPairsFromVlpLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedRouterTokenPairsFromVlpDocument, options);
}
function refetchCodegenGeneratedRouterTokenPairsFromVlpQuery(variables) {
    return { query: exports.CodegenGeneratedRouterTokenPairsFromVlpDocument, variables: variables };
}
exports.CodegenGeneratedRouterVlpDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_ROUTER_VLP($router_vlp_pair: PairInput) {
  router {
    vlp(pair: $router_vlp_pair) {
      token_1
      token_2
      vlp
    }
  }
}
    `;
/**
 * __useCodegenGeneratedRouterVlpQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedRouterVlpQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedRouterVlpQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedRouterVlpQuery({
 *   variables: {
 *      router_vlp_pair: // value for 'router_vlp_pair'
 *   },
 * });
 */
function useCodegenGeneratedRouterVlpQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedRouterVlpDocument, options);
}
function useCodegenGeneratedRouterVlpLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedRouterVlpDocument, options);
}
function refetchCodegenGeneratedRouterVlpQuery(variables) {
    return { query: exports.CodegenGeneratedRouterVlpDocument, variables: variables };
}
exports.CodegenGeneratedRouterDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_ROUTER {
  router {
    all_chains {
      chain_id
      chain_uid
      factory_address
    }
    state {
      admin
      virtual_balance_address
      vlp_code_id
    }
  }
}
    `;
/**
 * __useCodegenGeneratedRouterQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedRouterQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedRouterQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedRouterQuery({
 *   variables: {
 *   },
 * });
 */
function useCodegenGeneratedRouterQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedRouterDocument, options);
}
function useCodegenGeneratedRouterLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedRouterDocument, options);
}
function refetchCodegenGeneratedRouterQuery(variables) {
    return { query: exports.CodegenGeneratedRouterDocument, variables: variables };
}
exports.CodegenGeneratedTokenAllDexesDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_TOKEN_ALL_DEXES($token_all_dexes_limit: Int, $token_all_dexes_offset: Int) {
  token {
    all_dexes(limit: $token_all_dexes_limit, offset: $token_all_dexes_offset) {
      bg_color
      chain_uid
      dex_name
      display_name
      fg_color
      logo
    }
  }
}
    `;
/**
 * __useCodegenGeneratedTokenAllDexesQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedTokenAllDexesQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedTokenAllDexesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedTokenAllDexesQuery({
 *   variables: {
 *      token_all_dexes_limit: // value for 'token_all_dexes_limit'
 *      token_all_dexes_offset: // value for 'token_all_dexes_offset'
 *   },
 * });
 */
function useCodegenGeneratedTokenAllDexesQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedTokenAllDexesDocument, options);
}
function useCodegenGeneratedTokenAllDexesLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedTokenAllDexesDocument, options);
}
function refetchCodegenGeneratedTokenAllDexesQuery(variables) {
    return { query: exports.CodegenGeneratedTokenAllDexesDocument, variables: variables };
}
exports.CodegenGeneratedTokenChainsForTokenLaunchDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_TOKEN_CHAINS_FOR_TOKEN_LAUNCH {
  token {
    chains_for_token_launch {
      chain_id
      chain_uid
      display_name
      explorer_url
      factory_address
      logo
      token_factory_address
      type
    }
  }
}
    `;
/**
 * __useCodegenGeneratedTokenChainsForTokenLaunchQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedTokenChainsForTokenLaunchQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedTokenChainsForTokenLaunchQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedTokenChainsForTokenLaunchQuery({
 *   variables: {
 *   },
 * });
 */
function useCodegenGeneratedTokenChainsForTokenLaunchQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedTokenChainsForTokenLaunchDocument, options);
}
function useCodegenGeneratedTokenChainsForTokenLaunchLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedTokenChainsForTokenLaunchDocument, options);
}
function refetchCodegenGeneratedTokenChainsForTokenLaunchQuery(variables) {
    return { query: exports.CodegenGeneratedTokenChainsForTokenLaunchDocument, variables: variables };
}
exports.CodegenGeneratedTokenDexMetadataDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_TOKEN_DEX_METADATA($token_dex_metadata_dex: String!) {
  token {
    dex_metadata(dex: $token_dex_metadata_dex) {
      bg_color
      chain_uid
      dex_name
      display_name
      fg_color
      logo
    }
  }
}
    `;
/**
 * __useCodegenGeneratedTokenDexMetadataQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedTokenDexMetadataQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedTokenDexMetadataQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedTokenDexMetadataQuery({
 *   variables: {
 *      token_dex_metadata_dex: // value for 'token_dex_metadata_dex'
 *   },
 * });
 */
function useCodegenGeneratedTokenDexMetadataQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedTokenDexMetadataDocument, options);
}
function useCodegenGeneratedTokenDexMetadataLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedTokenDexMetadataDocument, options);
}
function refetchCodegenGeneratedTokenDexMetadataQuery(variables) {
    return { query: exports.CodegenGeneratedTokenDexMetadataDocument, variables: variables };
}
exports.CodegenGeneratedTokenGetAllFaucetsDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_TOKEN_GET_ALL_FAUCETS {
  token {
    get_all_faucets {
      faucet_link
      token
    }
  }
}
    `;
/**
 * __useCodegenGeneratedTokenGetAllFaucetsQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedTokenGetAllFaucetsQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedTokenGetAllFaucetsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedTokenGetAllFaucetsQuery({
 *   variables: {
 *   },
 * });
 */
function useCodegenGeneratedTokenGetAllFaucetsQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedTokenGetAllFaucetsDocument, options);
}
function useCodegenGeneratedTokenGetAllFaucetsLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedTokenGetAllFaucetsDocument, options);
}
function refetchCodegenGeneratedTokenGetAllFaucetsQuery(variables) {
    return { query: exports.CodegenGeneratedTokenGetAllFaucetsDocument, variables: variables };
}
exports.CodegenGeneratedTokenTokenDenomsDenomsDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_TOKEN_TOKEN_DENOMS_DENOMS($token_token_denoms_chain_uid: [String!], $token_token_denoms_denom: String, $token_token_denoms_token_id: String) {
  token {
    token_denoms(
      chain_uid: $token_token_denoms_chain_uid
      denom: $token_token_denoms_denom
      token_id: $token_token_denoms_token_id
    ) {
      denoms {
        chain_uid
        token_type {
          ... on NativeTokenType {
            native {
              denom
            }
          }
          ... on SmartTokenType {
            smart {
              contract_address
            }
          }
          ... on VoucherTokenType {
            voucher
          }
        }
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedTokenTokenDenomsDenomsQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedTokenTokenDenomsDenomsQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedTokenTokenDenomsDenomsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedTokenTokenDenomsDenomsQuery({
 *   variables: {
 *      token_token_denoms_chain_uid: // value for 'token_token_denoms_chain_uid'
 *      token_token_denoms_denom: // value for 'token_token_denoms_denom'
 *      token_token_denoms_token_id: // value for 'token_token_denoms_token_id'
 *   },
 * });
 */
function useCodegenGeneratedTokenTokenDenomsDenomsQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedTokenTokenDenomsDenomsDocument, options);
}
function useCodegenGeneratedTokenTokenDenomsDenomsLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedTokenTokenDenomsDenomsDocument, options);
}
function refetchCodegenGeneratedTokenTokenDenomsDenomsQuery(variables) {
    return { query: exports.CodegenGeneratedTokenTokenDenomsDenomsDocument, variables: variables };
}
exports.CodegenGeneratedTokenTokenDenomsDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_TOKEN_TOKEN_DENOMS($token_token_denoms_chain_uid: [String!], $token_token_denoms_denom: String, $token_token_denoms_token_id: String) {
  token {
    token_denoms(
      chain_uid: $token_token_denoms_chain_uid
      denom: $token_token_denoms_denom
      token_id: $token_token_denoms_token_id
    ) {
      denoms {
        chain_uid
        token_type {
          ... on NativeTokenType {
            native {
              denom
            }
          }
          ... on SmartTokenType {
            smart {
              contract_address
            }
          }
          ... on VoucherTokenType {
            voucher
          }
        }
      }
      token_id
    }
  }
}
    `;
/**
 * __useCodegenGeneratedTokenTokenDenomsQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedTokenTokenDenomsQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedTokenTokenDenomsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedTokenTokenDenomsQuery({
 *   variables: {
 *      token_token_denoms_chain_uid: // value for 'token_token_denoms_chain_uid'
 *      token_token_denoms_denom: // value for 'token_token_denoms_denom'
 *      token_token_denoms_token_id: // value for 'token_token_denoms_token_id'
 *   },
 * });
 */
function useCodegenGeneratedTokenTokenDenomsQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedTokenTokenDenomsDocument, options);
}
function useCodegenGeneratedTokenTokenDenomsLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedTokenTokenDenomsDocument, options);
}
function refetchCodegenGeneratedTokenTokenDenomsQuery(variables) {
    return { query: exports.CodegenGeneratedTokenTokenDenomsDocument, variables: variables };
}
exports.CodegenGeneratedTokenTokenLiquiditiesDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_TOKEN_TOKEN_LIQUIDITIES($token_token_liquidities_limit: Int!, $token_token_liquidities_page: Int!) {
  token {
    token_liquidities(
      limit: $token_token_liquidities_limit
      page: $token_token_liquidities_page
    ) {
      token
      total_liquidity
      total_volume
    }
  }
}
    `;
/**
 * __useCodegenGeneratedTokenTokenLiquiditiesQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedTokenTokenLiquiditiesQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedTokenTokenLiquiditiesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedTokenTokenLiquiditiesQuery({
 *   variables: {
 *      token_token_liquidities_limit: // value for 'token_token_liquidities_limit'
 *      token_token_liquidities_page: // value for 'token_token_liquidities_page'
 *   },
 * });
 */
function useCodegenGeneratedTokenTokenLiquiditiesQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedTokenTokenLiquiditiesDocument, options);
}
function useCodegenGeneratedTokenTokenLiquiditiesLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedTokenTokenLiquiditiesDocument, options);
}
function refetchCodegenGeneratedTokenTokenLiquiditiesQuery(variables) {
    return { query: exports.CodegenGeneratedTokenTokenLiquiditiesDocument, variables: variables };
}
exports.CodegenGeneratedTokenTokenLiquidityDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_TOKEN_TOKEN_LIQUIDITY($token_token_liquidity_token: String!) {
  token {
    token_liquidity(token: $token_token_liquidity_token) {
      token
      total_liquidity
      total_volume
    }
  }
}
    `;
/**
 * __useCodegenGeneratedTokenTokenLiquidityQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedTokenTokenLiquidityQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedTokenTokenLiquidityQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedTokenTokenLiquidityQuery({
 *   variables: {
 *      token_token_liquidity_token: // value for 'token_token_liquidity_token'
 *   },
 * });
 */
function useCodegenGeneratedTokenTokenLiquidityQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedTokenTokenLiquidityDocument, options);
}
function useCodegenGeneratedTokenTokenLiquidityLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedTokenTokenLiquidityDocument, options);
}
function refetchCodegenGeneratedTokenTokenLiquidityQuery(variables) {
    return { query: exports.CodegenGeneratedTokenTokenLiquidityDocument, variables: variables };
}
exports.CodegenGeneratedTokenTokenMetadataByIdDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_TOKEN_TOKEN_METADATA_BY_ID($token_token_metadata_by_id_token_id: String!, $token_token_metadata_by_id_verified: Boolean) {
  token {
    token_metadata_by_id(
      token_id: $token_token_metadata_by_id_token_id
      verified: $token_token_metadata_by_id_verified
    ) {
      chain_uids
      coinDecimal
      description
      dex
      displayName
      image
      min_swap_value
      price
      price_change_7d
      price_change_24h
      social
      tags
      tokenId
      total_volume
      total_volume_24h
    }
  }
}
    `;
/**
 * __useCodegenGeneratedTokenTokenMetadataByIdQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedTokenTokenMetadataByIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedTokenTokenMetadataByIdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedTokenTokenMetadataByIdQuery({
 *   variables: {
 *      token_token_metadata_by_id_token_id: // value for 'token_token_metadata_by_id_token_id'
 *      token_token_metadata_by_id_verified: // value for 'token_token_metadata_by_id_verified'
 *   },
 * });
 */
function useCodegenGeneratedTokenTokenMetadataByIdQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedTokenTokenMetadataByIdDocument, options);
}
function useCodegenGeneratedTokenTokenMetadataByIdLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedTokenTokenMetadataByIdDocument, options);
}
function refetchCodegenGeneratedTokenTokenMetadataByIdQuery(variables) {
    return { query: exports.CodegenGeneratedTokenTokenMetadataByIdDocument, variables: variables };
}
exports.CodegenGeneratedTokenTokenMetadatasDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_TOKEN_TOKEN_METADATAS($token_token_metadatas_chain_uids: [String!], $token_token_metadatas_dex: [String!], $token_token_metadatas_limit: Int, $token_token_metadatas_offset: Int, $token_token_metadatas_show_volume: Boolean, $token_token_metadatas_verified: Boolean) {
  token {
    token_metadatas(
      chain_uids: $token_token_metadatas_chain_uids
      dex: $token_token_metadatas_dex
      limit: $token_token_metadatas_limit
      offset: $token_token_metadatas_offset
      show_volume: $token_token_metadatas_show_volume
      verified: $token_token_metadatas_verified
    ) {
      chain_uids
      coinDecimal
      description
      dex
      displayName
      image
      min_swap_value
      price
      price_change_7d
      price_change_24h
      social
      tags
      tokenId
      total_volume
      total_volume_24h
    }
  }
}
    `;
/**
 * __useCodegenGeneratedTokenTokenMetadatasQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedTokenTokenMetadatasQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedTokenTokenMetadatasQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedTokenTokenMetadatasQuery({
 *   variables: {
 *      token_token_metadatas_chain_uids: // value for 'token_token_metadatas_chain_uids'
 *      token_token_metadatas_dex: // value for 'token_token_metadatas_dex'
 *      token_token_metadatas_limit: // value for 'token_token_metadatas_limit'
 *      token_token_metadatas_offset: // value for 'token_token_metadatas_offset'
 *      token_token_metadatas_show_volume: // value for 'token_token_metadatas_show_volume'
 *      token_token_metadatas_verified: // value for 'token_token_metadatas_verified'
 *   },
 * });
 */
function useCodegenGeneratedTokenTokenMetadatasQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedTokenTokenMetadatasDocument, options);
}
function useCodegenGeneratedTokenTokenMetadatasLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedTokenTokenMetadatasDocument, options);
}
function refetchCodegenGeneratedTokenTokenMetadatasQuery(variables) {
    return { query: exports.CodegenGeneratedTokenTokenMetadatasDocument, variables: variables };
}
exports.CodegenGeneratedTokenTokensMetadataDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_TOKEN_TOKENS_METADATA($token_tokens_metadata_token_ids: [String!]!, $token_tokens_metadata_verified: Boolean) {
  token {
    tokens_metadata(
      token_ids: $token_tokens_metadata_token_ids
      verified: $token_tokens_metadata_verified
    ) {
      chain_uids
      coinDecimal
      description
      dex
      displayName
      image
      min_swap_value
      price
      price_change_7d
      price_change_24h
      social
      tags
      tokenId
      total_volume
      total_volume_24h
    }
  }
}
    `;
/**
 * __useCodegenGeneratedTokenTokensMetadataQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedTokenTokensMetadataQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedTokenTokensMetadataQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedTokenTokensMetadataQuery({
 *   variables: {
 *      token_tokens_metadata_token_ids: // value for 'token_tokens_metadata_token_ids'
 *      token_tokens_metadata_verified: // value for 'token_tokens_metadata_verified'
 *   },
 * });
 */
function useCodegenGeneratedTokenTokensMetadataQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedTokenTokensMetadataDocument, options);
}
function useCodegenGeneratedTokenTokensMetadataLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedTokenTokensMetadataDocument, options);
}
function refetchCodegenGeneratedTokenTokensMetadataQuery(variables) {
    return { query: exports.CodegenGeneratedTokenTokensMetadataDocument, variables: variables };
}
exports.CodegenGeneratedTokenDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_TOKEN {
  token {
    chains_for_token_launch {
      chain_id
      chain_uid
      display_name
      explorer_url
      factory_address
      logo
      token_factory_address
      type
    }
    get_all_faucets {
      faucet_link
      token
    }
  }
}
    `;
/**
 * __useCodegenGeneratedTokenQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedTokenQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedTokenQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedTokenQuery({
 *   variables: {
 *   },
 * });
 */
function useCodegenGeneratedTokenQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedTokenDocument, options);
}
function useCodegenGeneratedTokenLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedTokenDocument, options);
}
function refetchCodegenGeneratedTokenQuery(variables) {
    return { query: exports.CodegenGeneratedTokenDocument, variables: variables };
}
exports.CodegenGeneratedVcoinBalanceDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_VCOIN_BALANCE($vcoin_balance_balance_key: BalanceKeyInput) {
  vcoin {
    balance(balance_key: $vcoin_balance_balance_key) {
      amount
    }
  }
}
    `;
/**
 * __useCodegenGeneratedVcoinBalanceQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedVcoinBalanceQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedVcoinBalanceQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedVcoinBalanceQuery({
 *   variables: {
 *      vcoin_balance_balance_key: // value for 'vcoin_balance_balance_key'
 *   },
 * });
 */
function useCodegenGeneratedVcoinBalanceQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedVcoinBalanceDocument, options);
}
function useCodegenGeneratedVcoinBalanceLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedVcoinBalanceDocument, options);
}
function refetchCodegenGeneratedVcoinBalanceQuery(variables) {
    return { query: exports.CodegenGeneratedVcoinBalanceDocument, variables: variables };
}
exports.CodegenGeneratedVcoinStateDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_VCOIN_STATE {
  vcoin {
    state {
      admin
      router
    }
  }
}
    `;
/**
 * __useCodegenGeneratedVcoinStateQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedVcoinStateQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedVcoinStateQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedVcoinStateQuery({
 *   variables: {
 *   },
 * });
 */
function useCodegenGeneratedVcoinStateQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedVcoinStateDocument, options);
}
function useCodegenGeneratedVcoinStateLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedVcoinStateDocument, options);
}
function refetchCodegenGeneratedVcoinStateQuery(variables) {
    return { query: exports.CodegenGeneratedVcoinStateDocument, variables: variables };
}
exports.CodegenGeneratedVcoinUserBalanceBalancesDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_VCOIN_USER_BALANCE_BALANCES($vcoin_user_balance_user: CrossChainUserInput) {
  vcoin {
    user_balance(user: $vcoin_user_balance_user) {
      balances {
        amount
        token_id
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedVcoinUserBalanceBalancesQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedVcoinUserBalanceBalancesQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedVcoinUserBalanceBalancesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedVcoinUserBalanceBalancesQuery({
 *   variables: {
 *      vcoin_user_balance_user: // value for 'vcoin_user_balance_user'
 *   },
 * });
 */
function useCodegenGeneratedVcoinUserBalanceBalancesQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedVcoinUserBalanceBalancesDocument, options);
}
function useCodegenGeneratedVcoinUserBalanceBalancesLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedVcoinUserBalanceBalancesDocument, options);
}
function refetchCodegenGeneratedVcoinUserBalanceBalancesQuery(variables) {
    return { query: exports.CodegenGeneratedVcoinUserBalanceBalancesDocument, variables: variables };
}
exports.CodegenGeneratedVcoinUserBalanceDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_VCOIN_USER_BALANCE($vcoin_user_balance_user: CrossChainUserInput) {
  vcoin {
    user_balance(user: $vcoin_user_balance_user) {
      balances {
        amount
        token_id
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedVcoinUserBalanceQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedVcoinUserBalanceQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedVcoinUserBalanceQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedVcoinUserBalanceQuery({
 *   variables: {
 *      vcoin_user_balance_user: // value for 'vcoin_user_balance_user'
 *   },
 * });
 */
function useCodegenGeneratedVcoinUserBalanceQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedVcoinUserBalanceDocument, options);
}
function useCodegenGeneratedVcoinUserBalanceLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedVcoinUserBalanceDocument, options);
}
function refetchCodegenGeneratedVcoinUserBalanceQuery(variables) {
    return { query: exports.CodegenGeneratedVcoinUserBalanceDocument, variables: variables };
}
exports.CodegenGeneratedVcoinDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_VCOIN {
  vcoin {
    state {
      admin
      router
    }
  }
}
    `;
/**
 * __useCodegenGeneratedVcoinQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedVcoinQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedVcoinQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedVcoinQuery({
 *   variables: {
 *   },
 * });
 */
function useCodegenGeneratedVcoinQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedVcoinDocument, options);
}
function useCodegenGeneratedVcoinLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedVcoinDocument, options);
}
function refetchCodegenGeneratedVcoinQuery(variables) {
    return { query: exports.CodegenGeneratedVcoinDocument, variables: variables };
}
exports.CodegenGeneratedVlpAllPoolsPaginationDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_VLP_ALL_POOLS_PAGINATION($contract: String, $pair: PairInput, $vlp_all_pools_limit: Int, $vlp_all_pools_offset: Int) {
  vlp(contract: $contract, pair: $pair) {
    all_pools(limit: $vlp_all_pools_limit, offset: $vlp_all_pools_offset) {
      pagination {
        limit
        offset
        total_count
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedVlpAllPoolsPaginationQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedVlpAllPoolsPaginationQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedVlpAllPoolsPaginationQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedVlpAllPoolsPaginationQuery({
 *   variables: {
 *      contract: // value for 'contract'
 *      pair: // value for 'pair'
 *      vlp_all_pools_limit: // value for 'vlp_all_pools_limit'
 *      vlp_all_pools_offset: // value for 'vlp_all_pools_offset'
 *   },
 * });
 */
function useCodegenGeneratedVlpAllPoolsPaginationQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedVlpAllPoolsPaginationDocument, options);
}
function useCodegenGeneratedVlpAllPoolsPaginationLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedVlpAllPoolsPaginationDocument, options);
}
function refetchCodegenGeneratedVlpAllPoolsPaginationQuery(variables) {
    return { query: exports.CodegenGeneratedVlpAllPoolsPaginationDocument, variables: variables };
}
exports.CodegenGeneratedVlpAllPoolsPoolsPoolDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_VLP_ALL_POOLS_POOLS_POOL($contract: String, $pair: PairInput, $vlp_all_pools_limit: Int, $vlp_all_pools_offset: Int) {
  vlp(contract: $contract, pair: $pair) {
    all_pools(limit: $vlp_all_pools_limit, offset: $vlp_all_pools_offset) {
      pools {
        pool {
          lp_shares
          reserve_1
          reserve_2
        }
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedVlpAllPoolsPoolsPoolQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedVlpAllPoolsPoolsPoolQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedVlpAllPoolsPoolsPoolQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedVlpAllPoolsPoolsPoolQuery({
 *   variables: {
 *      contract: // value for 'contract'
 *      pair: // value for 'pair'
 *      vlp_all_pools_limit: // value for 'vlp_all_pools_limit'
 *      vlp_all_pools_offset: // value for 'vlp_all_pools_offset'
 *   },
 * });
 */
function useCodegenGeneratedVlpAllPoolsPoolsPoolQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedVlpAllPoolsPoolsPoolDocument, options);
}
function useCodegenGeneratedVlpAllPoolsPoolsPoolLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedVlpAllPoolsPoolsPoolDocument, options);
}
function refetchCodegenGeneratedVlpAllPoolsPoolsPoolQuery(variables) {
    return { query: exports.CodegenGeneratedVlpAllPoolsPoolsPoolDocument, variables: variables };
}
exports.CodegenGeneratedVlpAllPoolsPoolsDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_VLP_ALL_POOLS_POOLS($contract: String, $pair: PairInput, $vlp_all_pools_limit: Int, $vlp_all_pools_offset: Int) {
  vlp(contract: $contract, pair: $pair) {
    all_pools(limit: $vlp_all_pools_limit, offset: $vlp_all_pools_offset) {
      pools {
        chain_uid
        pool {
          lp_shares
          reserve_1
          reserve_2
        }
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedVlpAllPoolsPoolsQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedVlpAllPoolsPoolsQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedVlpAllPoolsPoolsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedVlpAllPoolsPoolsQuery({
 *   variables: {
 *      contract: // value for 'contract'
 *      pair: // value for 'pair'
 *      vlp_all_pools_limit: // value for 'vlp_all_pools_limit'
 *      vlp_all_pools_offset: // value for 'vlp_all_pools_offset'
 *   },
 * });
 */
function useCodegenGeneratedVlpAllPoolsPoolsQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedVlpAllPoolsPoolsDocument, options);
}
function useCodegenGeneratedVlpAllPoolsPoolsLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedVlpAllPoolsPoolsDocument, options);
}
function refetchCodegenGeneratedVlpAllPoolsPoolsQuery(variables) {
    return { query: exports.CodegenGeneratedVlpAllPoolsPoolsDocument, variables: variables };
}
exports.CodegenGeneratedVlpAllPoolsDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_VLP_ALL_POOLS($contract: String, $pair: PairInput, $vlp_all_pools_limit: Int, $vlp_all_pools_offset: Int) {
  vlp(contract: $contract, pair: $pair) {
    all_pools(limit: $vlp_all_pools_limit, offset: $vlp_all_pools_offset) {
      pagination {
        limit
        offset
        total_count
      }
      pools {
        chain_uid
        pool {
          lp_shares
          reserve_1
          reserve_2
        }
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedVlpAllPoolsQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedVlpAllPoolsQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedVlpAllPoolsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedVlpAllPoolsQuery({
 *   variables: {
 *      contract: // value for 'contract'
 *      pair: // value for 'pair'
 *      vlp_all_pools_limit: // value for 'vlp_all_pools_limit'
 *      vlp_all_pools_offset: // value for 'vlp_all_pools_offset'
 *   },
 * });
 */
function useCodegenGeneratedVlpAllPoolsQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedVlpAllPoolsDocument, options);
}
function useCodegenGeneratedVlpAllPoolsLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedVlpAllPoolsDocument, options);
}
function refetchCodegenGeneratedVlpAllPoolsQuery(variables) {
    return { query: exports.CodegenGeneratedVlpAllPoolsDocument, variables: variables };
}
exports.CodegenGeneratedVlpFeeRecipientDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_VLP_FEE_RECIPIENT($contract: String, $pair: PairInput) {
  vlp(contract: $contract, pair: $pair) {
    fee {
      recipient {
        address
        amount
        chain_uid
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedVlpFeeRecipientQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedVlpFeeRecipientQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedVlpFeeRecipientQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedVlpFeeRecipientQuery({
 *   variables: {
 *      contract: // value for 'contract'
 *      pair: // value for 'pair'
 *   },
 * });
 */
function useCodegenGeneratedVlpFeeRecipientQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedVlpFeeRecipientDocument, options);
}
function useCodegenGeneratedVlpFeeRecipientLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedVlpFeeRecipientDocument, options);
}
function refetchCodegenGeneratedVlpFeeRecipientQuery(variables) {
    return { query: exports.CodegenGeneratedVlpFeeRecipientDocument, variables: variables };
}
exports.CodegenGeneratedVlpFeeDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_VLP_FEE($contract: String, $pair: PairInput) {
  vlp(contract: $contract, pair: $pair) {
    fee {
      euclid_fee_bps
      lp_fee_bps
      recipient {
        address
        amount
        chain_uid
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedVlpFeeQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedVlpFeeQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedVlpFeeQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedVlpFeeQuery({
 *   variables: {
 *      contract: // value for 'contract'
 *      pair: // value for 'pair'
 *   },
 * });
 */
function useCodegenGeneratedVlpFeeQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedVlpFeeDocument, options);
}
function useCodegenGeneratedVlpFeeLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedVlpFeeDocument, options);
}
function refetchCodegenGeneratedVlpFeeQuery(variables) {
    return { query: exports.CodegenGeneratedVlpFeeDocument, variables: variables };
}
exports.CodegenGeneratedVlpLiquidityPairDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_VLP_LIQUIDITY_PAIR($contract: String, $pair: PairInput) {
  vlp(contract: $contract, pair: $pair) {
    liquidity {
      pair {
        token_1
        token_2
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedVlpLiquidityPairQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedVlpLiquidityPairQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedVlpLiquidityPairQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedVlpLiquidityPairQuery({
 *   variables: {
 *      contract: // value for 'contract'
 *      pair: // value for 'pair'
 *   },
 * });
 */
function useCodegenGeneratedVlpLiquidityPairQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedVlpLiquidityPairDocument, options);
}
function useCodegenGeneratedVlpLiquidityPairLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedVlpLiquidityPairDocument, options);
}
function refetchCodegenGeneratedVlpLiquidityPairQuery(variables) {
    return { query: exports.CodegenGeneratedVlpLiquidityPairDocument, variables: variables };
}
exports.CodegenGeneratedVlpLiquidityDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_VLP_LIQUIDITY($contract: String, $pair: PairInput) {
  vlp(contract: $contract, pair: $pair) {
    liquidity {
      pair {
        token_1
        token_2
      }
      token_1_reserve
      token_2_reserve
      total_lp_tokens
    }
  }
}
    `;
/**
 * __useCodegenGeneratedVlpLiquidityQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedVlpLiquidityQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedVlpLiquidityQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedVlpLiquidityQuery({
 *   variables: {
 *      contract: // value for 'contract'
 *      pair: // value for 'pair'
 *   },
 * });
 */
function useCodegenGeneratedVlpLiquidityQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedVlpLiquidityDocument, options);
}
function useCodegenGeneratedVlpLiquidityLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedVlpLiquidityDocument, options);
}
function refetchCodegenGeneratedVlpLiquidityQuery(variables) {
    return { query: exports.CodegenGeneratedVlpLiquidityDocument, variables: variables };
}
exports.CodegenGeneratedVlpPoolDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_VLP_POOL($contract: String, $pair: PairInput, $vlp_pool_chain_uid: String!) {
  vlp(contract: $contract, pair: $pair) {
    pool(chain_uid: $vlp_pool_chain_uid) {
      lp_shares
      reserve_1
      reserve_2
    }
  }
}
    `;
/**
 * __useCodegenGeneratedVlpPoolQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedVlpPoolQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedVlpPoolQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedVlpPoolQuery({
 *   variables: {
 *      contract: // value for 'contract'
 *      pair: // value for 'pair'
 *      vlp_pool_chain_uid: // value for 'vlp_pool_chain_uid'
 *   },
 * });
 */
function useCodegenGeneratedVlpPoolQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedVlpPoolDocument, options);
}
function useCodegenGeneratedVlpPoolLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedVlpPoolDocument, options);
}
function refetchCodegenGeneratedVlpPoolQuery(variables) {
    return { query: exports.CodegenGeneratedVlpPoolDocument, variables: variables };
}
exports.CodegenGeneratedVlpStateFeeRecipientDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_VLP_STATE_FEE_RECIPIENT($contract: String, $pair: PairInput) {
  vlp(contract: $contract, pair: $pair) {
    state {
      fee {
        recipient {
          address
          amount
          chain_uid
        }
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedVlpStateFeeRecipientQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedVlpStateFeeRecipientQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedVlpStateFeeRecipientQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedVlpStateFeeRecipientQuery({
 *   variables: {
 *      contract: // value for 'contract'
 *      pair: // value for 'pair'
 *   },
 * });
 */
function useCodegenGeneratedVlpStateFeeRecipientQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedVlpStateFeeRecipientDocument, options);
}
function useCodegenGeneratedVlpStateFeeRecipientLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedVlpStateFeeRecipientDocument, options);
}
function refetchCodegenGeneratedVlpStateFeeRecipientQuery(variables) {
    return { query: exports.CodegenGeneratedVlpStateFeeRecipientDocument, variables: variables };
}
exports.CodegenGeneratedVlpStateFeeDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_VLP_STATE_FEE($contract: String, $pair: PairInput) {
  vlp(contract: $contract, pair: $pair) {
    state {
      fee {
        euclid_fee_bps
        lp_fee_bps
        recipient {
          address
          amount
          chain_uid
        }
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedVlpStateFeeQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedVlpStateFeeQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedVlpStateFeeQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedVlpStateFeeQuery({
 *   variables: {
 *      contract: // value for 'contract'
 *      pair: // value for 'pair'
 *   },
 * });
 */
function useCodegenGeneratedVlpStateFeeQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedVlpStateFeeDocument, options);
}
function useCodegenGeneratedVlpStateFeeLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedVlpStateFeeDocument, options);
}
function refetchCodegenGeneratedVlpStateFeeQuery(variables) {
    return { query: exports.CodegenGeneratedVlpStateFeeDocument, variables: variables };
}
exports.CodegenGeneratedVlpStatePairDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_VLP_STATE_PAIR($contract: String, $pair: PairInput) {
  vlp(contract: $contract, pair: $pair) {
    state {
      pair {
        token_1
        token_2
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedVlpStatePairQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedVlpStatePairQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedVlpStatePairQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedVlpStatePairQuery({
 *   variables: {
 *      contract: // value for 'contract'
 *      pair: // value for 'pair'
 *   },
 * });
 */
function useCodegenGeneratedVlpStatePairQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedVlpStatePairDocument, options);
}
function useCodegenGeneratedVlpStatePairLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedVlpStatePairDocument, options);
}
function refetchCodegenGeneratedVlpStatePairQuery(variables) {
    return { query: exports.CodegenGeneratedVlpStatePairDocument, variables: variables };
}
exports.CodegenGeneratedVlpStatePoolConfigStableDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_VLP_STATE_POOL_CONFIG_STABLE($contract: String, $pair: PairInput) {
  vlp(contract: $contract, pair: $pair) {
    state {
      pool_config {
        stable {
          amp_factor
        }
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedVlpStatePoolConfigStableQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedVlpStatePoolConfigStableQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedVlpStatePoolConfigStableQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedVlpStatePoolConfigStableQuery({
 *   variables: {
 *      contract: // value for 'contract'
 *      pair: // value for 'pair'
 *   },
 * });
 */
function useCodegenGeneratedVlpStatePoolConfigStableQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedVlpStatePoolConfigStableDocument, options);
}
function useCodegenGeneratedVlpStatePoolConfigStableLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedVlpStatePoolConfigStableDocument, options);
}
function refetchCodegenGeneratedVlpStatePoolConfigStableQuery(variables) {
    return { query: exports.CodegenGeneratedVlpStatePoolConfigStableDocument, variables: variables };
}
exports.CodegenGeneratedVlpStatePoolConfigDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_VLP_STATE_POOL_CONFIG($contract: String, $pair: PairInput) {
  vlp(contract: $contract, pair: $pair) {
    state {
      pool_config {
        constant_product
        stable {
          amp_factor
        }
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedVlpStatePoolConfigQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedVlpStatePoolConfigQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedVlpStatePoolConfigQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedVlpStatePoolConfigQuery({
 *   variables: {
 *      contract: // value for 'contract'
 *      pair: // value for 'pair'
 *   },
 * });
 */
function useCodegenGeneratedVlpStatePoolConfigQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedVlpStatePoolConfigDocument, options);
}
function useCodegenGeneratedVlpStatePoolConfigLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedVlpStatePoolConfigDocument, options);
}
function refetchCodegenGeneratedVlpStatePoolConfigQuery(variables) {
    return { query: exports.CodegenGeneratedVlpStatePoolConfigDocument, variables: variables };
}
exports.CodegenGeneratedVlpStateDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_VLP_STATE($contract: String, $pair: PairInput) {
  vlp(contract: $contract, pair: $pair) {
    state {
      admin
      fee {
        euclid_fee_bps
        lp_fee_bps
        recipient {
          address
          amount
          chain_uid
        }
      }
      last_updated
      pair {
        token_1
        token_2
      }
      pool_config {
        constant_product
        stable {
          amp_factor
        }
      }
      router
      total_lp_tokens
      vcoin
    }
  }
}
    `;
/**
 * __useCodegenGeneratedVlpStateQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedVlpStateQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedVlpStateQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedVlpStateQuery({
 *   variables: {
 *      contract: // value for 'contract'
 *      pair: // value for 'pair'
 *   },
 * });
 */
function useCodegenGeneratedVlpStateQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedVlpStateDocument, options);
}
function useCodegenGeneratedVlpStateLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedVlpStateDocument, options);
}
function refetchCodegenGeneratedVlpStateQuery(variables) {
    return { query: exports.CodegenGeneratedVlpStateDocument, variables: variables };
}
exports.CodegenGeneratedVlpTotalFeesCollectedEuclidFeesTotalsDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_VLP_TOTAL_FEES_COLLECTED_EUCLID_FEES_TOTALS($contract: String, $pair: PairInput) {
  vlp(contract: $contract, pair: $pair) {
    total_fees_collected {
      euclid_fees {
        totals {
          amount
          denom
        }
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedVlpTotalFeesCollectedEuclidFeesTotalsQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedVlpTotalFeesCollectedEuclidFeesTotalsQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedVlpTotalFeesCollectedEuclidFeesTotalsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedVlpTotalFeesCollectedEuclidFeesTotalsQuery({
 *   variables: {
 *      contract: // value for 'contract'
 *      pair: // value for 'pair'
 *   },
 * });
 */
function useCodegenGeneratedVlpTotalFeesCollectedEuclidFeesTotalsQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedVlpTotalFeesCollectedEuclidFeesTotalsDocument, options);
}
function useCodegenGeneratedVlpTotalFeesCollectedEuclidFeesTotalsLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedVlpTotalFeesCollectedEuclidFeesTotalsDocument, options);
}
function refetchCodegenGeneratedVlpTotalFeesCollectedEuclidFeesTotalsQuery(variables) {
    return { query: exports.CodegenGeneratedVlpTotalFeesCollectedEuclidFeesTotalsDocument, variables: variables };
}
exports.CodegenGeneratedVlpTotalFeesCollectedEuclidFeesDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_VLP_TOTAL_FEES_COLLECTED_EUCLID_FEES($contract: String, $pair: PairInput) {
  vlp(contract: $contract, pair: $pair) {
    total_fees_collected {
      euclid_fees {
        totals {
          amount
          denom
        }
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedVlpTotalFeesCollectedEuclidFeesQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedVlpTotalFeesCollectedEuclidFeesQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedVlpTotalFeesCollectedEuclidFeesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedVlpTotalFeesCollectedEuclidFeesQuery({
 *   variables: {
 *      contract: // value for 'contract'
 *      pair: // value for 'pair'
 *   },
 * });
 */
function useCodegenGeneratedVlpTotalFeesCollectedEuclidFeesQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedVlpTotalFeesCollectedEuclidFeesDocument, options);
}
function useCodegenGeneratedVlpTotalFeesCollectedEuclidFeesLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedVlpTotalFeesCollectedEuclidFeesDocument, options);
}
function refetchCodegenGeneratedVlpTotalFeesCollectedEuclidFeesQuery(variables) {
    return { query: exports.CodegenGeneratedVlpTotalFeesCollectedEuclidFeesDocument, variables: variables };
}
exports.CodegenGeneratedVlpTotalFeesCollectedLpFeesTotalsDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_VLP_TOTAL_FEES_COLLECTED_LP_FEES_TOTALS($contract: String, $pair: PairInput) {
  vlp(contract: $contract, pair: $pair) {
    total_fees_collected {
      lp_fees {
        totals {
          amount
          denom
        }
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedVlpTotalFeesCollectedLpFeesTotalsQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedVlpTotalFeesCollectedLpFeesTotalsQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedVlpTotalFeesCollectedLpFeesTotalsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedVlpTotalFeesCollectedLpFeesTotalsQuery({
 *   variables: {
 *      contract: // value for 'contract'
 *      pair: // value for 'pair'
 *   },
 * });
 */
function useCodegenGeneratedVlpTotalFeesCollectedLpFeesTotalsQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedVlpTotalFeesCollectedLpFeesTotalsDocument, options);
}
function useCodegenGeneratedVlpTotalFeesCollectedLpFeesTotalsLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedVlpTotalFeesCollectedLpFeesTotalsDocument, options);
}
function refetchCodegenGeneratedVlpTotalFeesCollectedLpFeesTotalsQuery(variables) {
    return { query: exports.CodegenGeneratedVlpTotalFeesCollectedLpFeesTotalsDocument, variables: variables };
}
exports.CodegenGeneratedVlpTotalFeesCollectedLpFeesDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_VLP_TOTAL_FEES_COLLECTED_LP_FEES($contract: String, $pair: PairInput) {
  vlp(contract: $contract, pair: $pair) {
    total_fees_collected {
      lp_fees {
        totals {
          amount
          denom
        }
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedVlpTotalFeesCollectedLpFeesQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedVlpTotalFeesCollectedLpFeesQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedVlpTotalFeesCollectedLpFeesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedVlpTotalFeesCollectedLpFeesQuery({
 *   variables: {
 *      contract: // value for 'contract'
 *      pair: // value for 'pair'
 *   },
 * });
 */
function useCodegenGeneratedVlpTotalFeesCollectedLpFeesQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedVlpTotalFeesCollectedLpFeesDocument, options);
}
function useCodegenGeneratedVlpTotalFeesCollectedLpFeesLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedVlpTotalFeesCollectedLpFeesDocument, options);
}
function refetchCodegenGeneratedVlpTotalFeesCollectedLpFeesQuery(variables) {
    return { query: exports.CodegenGeneratedVlpTotalFeesCollectedLpFeesDocument, variables: variables };
}
exports.CodegenGeneratedVlpTotalFeesCollectedDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_VLP_TOTAL_FEES_COLLECTED($contract: String, $pair: PairInput) {
  vlp(contract: $contract, pair: $pair) {
    total_fees_collected {
      euclid_fees {
        totals {
          amount
          denom
        }
      }
      lp_fees {
        totals {
          amount
          denom
        }
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedVlpTotalFeesCollectedQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedVlpTotalFeesCollectedQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedVlpTotalFeesCollectedQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedVlpTotalFeesCollectedQuery({
 *   variables: {
 *      contract: // value for 'contract'
 *      pair: // value for 'pair'
 *   },
 * });
 */
function useCodegenGeneratedVlpTotalFeesCollectedQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedVlpTotalFeesCollectedDocument, options);
}
function useCodegenGeneratedVlpTotalFeesCollectedLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedVlpTotalFeesCollectedDocument, options);
}
function refetchCodegenGeneratedVlpTotalFeesCollectedQuery(variables) {
    return { query: exports.CodegenGeneratedVlpTotalFeesCollectedDocument, variables: variables };
}
exports.CodegenGeneratedVlpTotalFeesCollectedPerDenomDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_VLP_TOTAL_FEES_COLLECTED_PER_DENOM($contract: String, $pair: PairInput, $vlp_total_fees_collected_per_denom_denom: String!) {
  vlp(contract: $contract, pair: $pair) {
    total_fees_collected_per_denom(denom: $vlp_total_fees_collected_per_denom_denom) {
      euclid_fees
      lp_fees
    }
  }
}
    `;
/**
 * __useCodegenGeneratedVlpTotalFeesCollectedPerDenomQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedVlpTotalFeesCollectedPerDenomQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedVlpTotalFeesCollectedPerDenomQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedVlpTotalFeesCollectedPerDenomQuery({
 *   variables: {
 *      contract: // value for 'contract'
 *      pair: // value for 'pair'
 *      vlp_total_fees_collected_per_denom_denom: // value for 'vlp_total_fees_collected_per_denom_denom'
 *   },
 * });
 */
function useCodegenGeneratedVlpTotalFeesCollectedPerDenomQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedVlpTotalFeesCollectedPerDenomDocument, options);
}
function useCodegenGeneratedVlpTotalFeesCollectedPerDenomLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedVlpTotalFeesCollectedPerDenomDocument, options);
}
function refetchCodegenGeneratedVlpTotalFeesCollectedPerDenomQuery(variables) {
    return { query: exports.CodegenGeneratedVlpTotalFeesCollectedPerDenomDocument, variables: variables };
}
exports.CodegenGeneratedVlpDocument = (0, client_1.gql) `
    query CODEGEN_GENERATED_VLP($contract: String, $pair: PairInput) {
  vlp(contract: $contract, pair: $pair) {
    fee {
      euclid_fee_bps
      lp_fee_bps
      recipient {
        address
        amount
        chain_uid
      }
    }
    liquidity {
      pair {
        token_1
        token_2
      }
      token_1_reserve
      token_2_reserve
      total_lp_tokens
    }
    state {
      admin
      fee {
        euclid_fee_bps
        lp_fee_bps
        recipient {
          address
          amount
          chain_uid
        }
      }
      last_updated
      pair {
        token_1
        token_2
      }
      pool_config {
        constant_product
        stable {
          amp_factor
        }
      }
      router
      total_lp_tokens
      vcoin
    }
    total_fees_collected {
      euclid_fees {
        totals {
          amount
          denom
        }
      }
      lp_fees {
        totals {
          amount
          denom
        }
      }
    }
  }
}
    `;
/**
 * __useCodegenGeneratedVlpQuery__
 *
 * To run a query within a React component, call `useCodegenGeneratedVlpQuery` and pass it any options that fit your needs.
 * When your component renders, `useCodegenGeneratedVlpQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCodegenGeneratedVlpQuery({
 *   variables: {
 *      contract: // value for 'contract'
 *      pair: // value for 'pair'
 *   },
 * });
 */
function useCodegenGeneratedVlpQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(exports.CodegenGeneratedVlpDocument, options);
}
function useCodegenGeneratedVlpLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(exports.CodegenGeneratedVlpDocument, options);
}
function refetchCodegenGeneratedVlpQuery(variables) {
    return { query: exports.CodegenGeneratedVlpDocument, variables: variables };
}
